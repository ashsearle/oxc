var searchIndex = JSON.parse('{\
"oxc_allocator":{"doc":"","t":"DDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Allocator","Box","String","Vec","add","add_assign","as_bytes","as_mut_str","as_mut_vec","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","capacity","clear","clone","clone_from","clone_into","cmp","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_iter_in","from_iter_in","from_iter_in","from_raw_parts_in","from_str_in","from_utf16_in","from_utf8","from_utf8_lossy_in","from_utf8_unchecked","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_bump_str","into_bytes","into_inner","into_iter","into_iter","is_empty","is_empty","len","new_in","new_in","partial_cmp","pop","push","push_str","remove","replace_range","reserve","reserve_exact","retain","serialize","serialize","shrink_to_fit","split_off","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unbox","with_capacity_in","with_capacity_in","write_char","write_str"],"q":["oxc_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Bumpalo Box","A UTF-8 encoded, growable string.","Bumpalo Vec","","","Returns a byte slice of this <code>String</code>’s contents.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns a shared reference to the allocator backing this …","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","","","Creates a draining iterator that removes the specified …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Construct a new <code>String&lt;&#39;bump&gt;</code> from an iterator of <code>char</code>s.","Creates a new <code>String</code> from a length, capacity, and pointer.","Construct a new <code>String&lt;&#39;bump&gt;</code> from a string slice.","Decode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, returning …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>String&lt;&#39;bump&gt;</code> into a <code>&amp;&#39;bump str</code>. This is …","Converts a <code>String</code> into a byte vector.","","","","","Returns <code>true</code> if this <code>String</code> has a length of zero.","Returns the length of this <code>String</code>, in bytes.","","Creates a new empty <code>String</code>.","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Removes the specified range in the string, and replaces it …","Ensures that this <code>String</code>’s capacity is at least …","Ensures that this <code>String</code>’s capacity is <code>additional</code> bytes …","Retains only the characters specified by the predicate.","","","Shrinks the capacity of this <code>String</code> to match its length.","Splits the string into two at the given index.","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","","","","","","","Creates a new empty <code>String</code> with a particular capacity.","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,1,1,1,1,1,1,1,1,7,9,10,7,1,9,10,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,10,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,1,10,10,10,10,1,1,10,1,1,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,9,10,7,1,9,10,7,1,9,10,7,1,9,10,1,1,1],"f":[0,0,0,0,[[1,2],1],[[1,2]],[1],[1,2],[1,3],[1],[1,2],[1,2],[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[[]],[1,2],[1,4],[1,5],[1],[1,1],[[1,1]],[[]],[[1,1],6],[[],7],[[[9,[8]]]],[10],[7],[1,2],[[[9,[8]]]],[10,3],[1,2],[[1,[11,[5]]],12],[[[9,[[0,[[13,[[0,[[13,[[0,[[13,[[0,[13,8]]]],8]]]],8]]]],8]]]],9],14],[[[10,[13]],10],14],[[1,15],14],[[1,1],14],[[1,2],14],[[1,2],14],[[1,16],14],[[1,17]],[[1,17]],[[1,17]],[[1,17]],[[1,17]],[[1,17]],[[[9,[[0,[8,18]]]],19],20],[[[10,[18]],19],20],[[7,19],20],[[1,19],[[22,[21]]]],[[1,19],[[22,[21]]]],[[]],[[]],[[]],[[]],[[17,7],10],[17,1],[[17,4],1],[[23,5,5,4],1],[[2,4],1],[4,[[22,[1,24]]]],[[[3,[23]]],[[22,[1,25]]]],[4,1],[[[3,[23]]],1],[[[9,[26]]]],[[[10,[26]]]],[1],[[1,27],2],[[1,[28,[5]]],2],[[1,[29,[5]]],2],[[1,[30,[5]]],2],[[1,[31,[5]]],2],[[1,[32,[5]]],2],[[1,[30,[5]]],2],[[1,27],2],[[1,[29,[5]]],2],[[1,[31,[5]]],2],[[1,[32,[5]]],2],[[1,[28,[5]]],2],[[1,5,33]],[[1,5,2]],[[]],[[]],[[]],[[]],[1,2],[1,[[3,[23]]]],[10,3],[10],[10],[10,14],[1,14],[1,5],[7,10],[4,1],[[1,1],[[34,[6]]]],[1,[[34,[33]]]],[[1,33]],[[1,2]],[[1,5],33],[[1,[11,[5]],2]],[[1,5]],[[1,5]],[[1,35]],[[[9,[36]],37],22],[[[10,[36]],37],22],[1],[[1,5],1],[[]],[[],15],[[1,5]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],38],[[],38],[[],38],[[],38],[9],[[5,7],10],[[5,4],1],[[1,33],[[22,[21]]]],[[1,2],[[22,[21]]]]],"p":[[3,"String"],[15,"str"],[3,"Vec"],[3,"Bump"],[15,"usize"],[4,"Ordering"],[3,"Allocator"],[8,"Sized"],[3,"Box"],[3,"Vec"],[8,"RangeBounds"],[3,"Drain"],[8,"PartialEq"],[15,"bool"],[3,"String"],[4,"Cow"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[15,"u8"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[8,"Hash"],[3,"RangeFull"],[3,"RangeTo"],[3,"RangeToInclusive"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[15,"char"],[4,"Option"],[8,"FnMut"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"]]},\
"oxc_ast":{"doc":"AST NOTE: This is not compatible with estree.","tn":["AstKind","Atom","BigUint","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","ast","ast_builder","ast_kind","average_ceil","average_floor","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow_mut","cbrt","cbrt","checked_add","checked_div","checked_mul","checked_sub","clone","clone_from","clone_into","cmp","context","count_ones","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_floor","div_mod_floor","div_rem","divides","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_be","from_bytes_le","from_f64","from_i128","from_i64","from_radix_be","from_radix_le","from_slice","from_str","from_str_radix","from_u128","from_u64","gcd","gcd_lcm","hash","into","is_even","is_multiple_of","is_odd","is_one","is_zero","iter_u32_digits","iter_u64_digits","lcm","mod_floor","modpow","module_record","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","next_multiple_of","nth_root","nth_root","one","parse_bytes","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_one","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","source_type","span","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","syntax_directed_operations","to_bigint","to_biguint","to_bytes_be","to_bytes_le","to_compact_string","to_f32","to_f64","to_i128","to_i64","to_owned","to_radix_be","to_radix_le","to_str_radix","to_string","to_u128","to_u32_digits","to_u64","to_u64_digits","trailing_ones","trailing_zeros","trivia","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","type_id","visit","visit_mut","zero","Abstract","Accessor","AccessorProperty","AccessorProperty","Addition","Addition","And","Argument","ArrayAssignmentTarget","ArrayAssignmentTarget","ArrayExpression","ArrayExpression","ArrayPattern","ArrayPattern","ArrowExpression","ArrowFormalParameters","ArrowFunctionExpression","Assign","AssignmentExpression","AssignmentExpression","AssignmentOperator","AssignmentOperator","AssignmentPattern","AssignmentPattern","AssignmentTarget","AssignmentTarget","AssignmentTarget","AssignmentTargetIdentifier","AssignmentTargetMaybeDefault","AssignmentTargetPattern","AssignmentTargetPattern","AssignmentTargetProperty","AssignmentTargetPropertyIdentifier","AssignmentTargetPropertyIdentifier","AssignmentTargetPropertyProperty","AssignmentTargetPropertyProperty","AssignmentTargetWithDefault","AssignmentTargetWithDefault","Async","Attribute","AwaitExpression","AwaitExpression","BigintLiteral","BigintLiteral","BigintLiteral","Binary","BinaryExpression","BinaryExpression","BinaryOperator","BinaryOperator","BindingIdentifier","BindingIdentifier","BindingPattern","BindingPatternKind","BitwiseAnd","BitwiseAnd","BitwiseNot","BitwiseOR","BitwiseOR","BitwiseXOR","BitwiseXOR","BlockStatement","BlockStatement","BooleanLiteral","BooleanLiteral","BooleanLiteral","BreakStatement","BreakStatement","CallExpression","CallExpression","CallExpression","CatchClause","ChainElement","ChainExpression","ChainExpression","Class","ClassBody","ClassDeclaration","ClassDeclaration","ClassDeclaration","ClassElement","ClassExpression","ClassExpression","ClassType","Coalesce","ComputedMemberExpression","ComputedMemberExpression","ComputedPropertyName","ConditionalExpression","ConditionalExpression","Const","Const","Constructor","ContinueStatement","ContinueStatement","D","DebuggerStatement","DebuggerStatement","Decimal","Declaration","Declaration","Declare","Decorator","Decrement","Default","Delete","Directive","Division","Division","DoWhileStatement","DoWhileStatement","Element","Element","EmptyExpression","EmptyObject","EmptyStatement","EmptyStatement","Equality","Exponential","Exponential","Export","ExportAllDeclaration","ExportAllDeclaration","ExportDefaultDeclaration","ExportDefaultDeclaration","ExportDefaultDeclarationKind","ExportNamedDeclaration","ExportNamedDeclaration","ExportSpecifier","Expression","Expression","Expression","Expression","Expression","Expression","Expression","ExpressionContainer","ExpressionContainer","ExpressionStatement","ExpressionStatement","ExternalModuleReference","ForInStatement","ForInStatement","ForOfStatement","ForOfStatement","ForStatement","ForStatement","ForStatementInit","ForStatementLeft","FormalParameter","FormalParameter","FormalParameterKind","FormalParameters","Fragment","Fragment","Function","FunctionBody","FunctionDeclaration","FunctionDeclaration","FunctionDeclaration","FunctionExpression","FunctionExpression","FunctionType","G","Get","Get","Get","GreaterEqualThan","GreaterThan","Hex","I","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","IdentifierName","IdentifierName","IdentifierReference","IfStatement","IfStatement","ImportAttribute","ImportAttributeKey","ImportDeclaration","ImportDeclaration","ImportDeclarationSpecifier","ImportDefaultSpecifier","ImportDefaultSpecifier","ImportExpression","ImportExpression","ImportNamespaceSpecifier","ImportNamespaceSpecifier","ImportOrExportKind","ImportSpecifier","ImportSpecifier","In","In","Increment","Inequality","Init","Instanceof","JSDocNullableType","JSDocNullableType","JSDocUnknownType","JSDocUnknownType","JSXAttribute","JSXAttributeItem","JSXAttributeName","JSXAttributeValue","JSXChild","JSXClosingElement","JSXClosingFragment","JSXElement","JSXElement","JSXElementName","JSXEmptyExpression","JSXExpression","JSXExpressionContainer","JSXFragment","JSXFragment","JSXIdentifier","JSXMemberExpression","JSXMemberExpressionObject","JSXNamespacedName","JSXOpeningElement","JSXOpeningFragment","JSXSpreadAttribute","JSXSpreadChild","JSXText","Keyof","LabelIdentifier","LabeledStatement","LabeledStatement","LessEqualThan","LessThan","Let","LogicalAnd","LogicalExpression","LogicalExpression","LogicalNot","LogicalNullish","LogicalOperator","LogicalOperator","LogicalOr","M","MemberAssignmentTarget","MemberExpression","MemberExpression","MemberExpression","MemberExpression","MemberExpression","MetaProperty","MetaProperty","Method","Method","MethodDefinition","MethodDefinition","MethodDefinitionKind","Minus","Modifier","ModifierKind","Modifiers","ModuleDeclaration","ModuleDeclaration","ModuleDeclarationKind","ModuleExportName","Multiplication","Multiplication","NamespacedName","NamespacedName","NewExpression","NewExpression","None","NullLiteral","NullLiteral","NullLiteral","NumberBase","NumberLiteral","NumberLiteral","NumberLiteral","NumberLiteral","ObjectAssignmentTarget","ObjectAssignmentTarget","ObjectExpression","ObjectExpression","ObjectPattern","ObjectPattern","ObjectPatternProperty","ObjectProperty","Octal","Operator","Or","Out","Override","ParenthesizedExpression","ParenthesizedExpression","Pattern","Plus","Private","Private","PrivateFieldExpression","PrivateFieldExpression","PrivateIdentifier","PrivateIdentifier","PrivateInExpression","PrivateInExpression","Program","Property","Property","Property","PropertyDefinition","PropertyDefinition","PropertyKey","PropertyKind","PropertyValue","Protected","Protected","Public","Public","QualifiedName","Readonly","Readonly","RegExp","RegExpFlags","RegExpLiteral","RegExpLiteral","RegExpLiteral","Remainder","Remainder","RestElement","RestElement","RestElement","ReturnStatement","ReturnStatement","S","SequenceExpression","SequenceExpression","Set","Set","Set","ShiftLeft","ShiftLeft","ShiftRight","ShiftRight","ShiftRightZeroFill","ShiftRightZeroFill","Signature","SimpleAssignmentTarget","SimpleAssignmentTarget","Spread","SpreadAttribute","SpreadElement","SpreadElement","SpreadProperty","Statement","Static","StaticBlock","StaticBlock","StaticMemberExpression","StaticMemberExpression","StrictEquality","StrictInequality","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","Subtraction","Subtraction","Super","Super","SwitchCase","SwitchStatement","SwitchStatement","TSAbstractMethodDefinition","TSAbstractMethodDefinition","TSAbstractPropertyDefinition","TSAbstractPropertyDefinition","TSAccessibility","TSAnyKeyword","TSAnyKeyword","TSArrayType","TSArrayType","TSAsExpression","TSAsExpression","TSAsExpression","TSBigIntKeyword","TSBigIntKeyword","TSBooleanKeyword","TSBooleanKeyword","TSCallSignatureDeclaration","TSCallSignatureDeclaration","TSClassImplements","TSConditionalType","TSConditionalType","TSConstructSignatureDeclaration","TSConstructSignatureDeclaration","TSConstructorType","TSConstructorType","TSDeclareFunction","TSEnumDeclaration","TSEnumDeclaration","TSEnumDeclaration","TSEnumMember","TSEnumMemberName","TSExportAssignment","TSExportAssignment","TSExternalModuleReference","TSFunctionType","TSFunctionType","TSImportEqualsDeclaration","TSImportEqualsDeclaration","TSImportType","TSImportType","TSIndexSignature","TSIndexSignature","TSIndexSignature","TSIndexSignatureName","TSIndexedAccessType","TSIndexedAccessType","TSInferType","TSInferType","TSInstantiationExpression","TSInstantiationExpression","TSInterfaceBody","TSInterfaceDeclaration","TSInterfaceDeclaration","TSInterfaceDeclaration","TSInterfaceHeritage","TSIntersectionType","TSIntersectionType","TSLiteral","TSLiteralType","TSLiteralType","TSMappedType","TSMappedType","TSMappedTypeModifierOperator","TSMethodSignature","TSMethodSignature","TSMethodSignatureKind","TSModuleBlock","TSModuleBlock","TSModuleDeclaration","TSModuleDeclaration","TSModuleDeclaration","TSModuleDeclarationBody","TSModuleDeclarationName","TSModuleReference","TSNamedTupleMember","TSNamedTupleMember","TSNamespaceExportDeclaration","TSNamespaceExportDeclaration","TSNeverKeyword","TSNeverKeyword","TSNonNullExpression","TSNonNullExpression","TSNonNullExpression","TSNullKeyword","TSNullKeyword","TSNumberKeyword","TSNumberKeyword","TSObjectKeyword","TSObjectKeyword","TSOptionalType","TSOptionalType","TSPropertySignature","TSPropertySignature","TSQualifiedName","TSQualifiedName","TSRestType","TSRestType","TSSignature","TSStringKeyword","TSStringKeyword","TSSymbolKeyword","TSSymbolKeyword","TSTemplateLiteralType","TSTemplateLiteralType","TSThisKeyword","TSThisKeyword","TSTupleElement","TSTupleType","TSTupleType","TSType","TSType","TSTypeAliasDeclaration","TSTypeAliasDeclaration","TSTypeAnnotation","TSTypeAssertion","TSTypeAssertion","TSTypeAssertion","TSTypeLiteral","TSTypeLiteral","TSTypeName","TSTypeOperator","TSTypeOperatorType","TSTypeOperatorType","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypePredicate","TSTypePredicate","TSTypePredicateName","TSTypeQuery","TSTypeQuery","TSTypeReference","TSTypeReference","TSUndefinedKeyword","TSUndefinedKeyword","TSUnionType","TSUnionType","TSUnknownKeyword","TSUnknownKeyword","TSVoidKeyword","TSVoidKeyword","TaggedTemplateExpression","TaggedTemplateExpression","TemplateElement","TemplateElementValue","TemplateLiteral","TemplateLiteral","TemplateLiteral","Text","This","ThisExpression","ThisExpression","ThrowStatement","ThrowStatement","True","TryStatement","TryStatement","Type","TypeName","Typeof","U","UnaryExpression","UnaryExpression","UnaryExpression","UnaryNegation","UnaryOperator","UnaryOperator","UnaryPlus","Unique","UniqueFormalParameters","UpdateExpression","UpdateExpression","UpdateOperator","UpdateOperator","V","Value","Var","VariableDeclaration","VariableDeclaration","VariableDeclaration","VariableDeclaration","VariableDeclarationKind","VariableDeclarator","Void","WhileStatement","WhileStatement","WithStatement","WithStatement","Y","YieldExpression","YieldExpression","abstract","accessibility","accessibility","accessibility","all","alternate","alternate","argument","argument","argument","argument","argument","argument","argument","argument","argument","arguments","arguments","arguments","as_atom","as_str","as_str","as_str","as_str","as_str","as_str","assertions","assertions","asserts","async","async","attributes","await","base","binding","binding","binding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_name","bound_name","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","callee","callee","cases","check_type","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closing_element","closing_fragment","cmp","common_js_require","complement","computed","computed","computed","computed","computed","computed","computed","consequent","consequent","consequent","constraint","contains","contains","cooked","declaration","declaration","declarations","declare","decorators","decorators","decorators","decorators","default","default","definite","definite","delegate","difference","directive","directives","directives","discriminant","element_type","element_type","element_types","elements","elements","elements","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evaluate_to_undefined","export_kind","export_kind","exported","exported","exported","expr_name","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expressions","expressions","extend","extends","extends_type","false_type","field","finalizer","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_src","generator","generator","get_boolean_value","get_expression","get_first_name","get_identifier_reference","get_inner_expression","get_object_identifier","handler","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","id","id","id","id","id","id","id","id","id","id","implements","import_kind","import_kind","imported","in","index_type","init","init","init","init","initializer","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_arithmetic","is_arithmetic","is_arithmetic","is_bitwise","is_bitwise","is_bitwise","is_compare","is_const","is_const","is_const_type_reference","is_declaration","is_declaration","is_declare","is_destructuring_pattern","is_destructuring_pattern","is_empty","is_empty","is_empty","is_empty","is_equality","is_export","is_export","is_expression","is_expression","is_false","is_function","is_function_declaration","is_identifier","is_keyword","is_keyword","is_lexical","is_literal_expression","is_logical_operator","is_no_substitution_template","is_none","is_null","is_null_or_undefined","is_numeric_or_string_binary_operator","is_primary_expression","is_private_identifier","is_qualified_name","is_relational","is_require_call","is_rest_element","is_simple_parameter_list","is_specific_id","is_specific_member_access","is_specific_member_access","is_string_literal","is_string_well_formed_unicode","is_symbol_or_symbol_for_call","is_ts_declare_function","is_ts_empty_body_function","is_type","is_type_of","is_typescript_syntax","is_typescript_syntax","is_typescript_syntax","is_typescript_syntax","is_undefined","is_value","is_void_0","items","key","key","key","key","key","key","key","kind","kind","kind","kind","kind","kind","kind","kind","kind","label","label","label","label","left","left","left","left","left","left","left","left","literal","local","local","local","local","members","members","meta","method","method_definition","method_definition_kind","modifiers","modifiers","modifiers","modifiers","modifiers","modifiers","modifiers","module_reference","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name_type","namespace","new","new","not","object","object","object","object","object","object","object_type","opening_element","opening_fragment","operator","operator","operator","operator","operator","operator","operator","operator","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","out","override","override","param","parameter","parameter_name","parameters","params","params","params","params","params","params","params","params","params","partial_cmp","pattern","pattern","postfix","prefix","prefix","private_bound_identifiers","private_bound_identifiers","private_bound_identifiers","private_bound_identifiers","prop_name","prop_name","prop_name","prop_name","prop_name","prop_name","properties","properties","properties","property","property","property","property","property_definition","property_key","qualifier","quasi","quasi","quasis","quasis","raw","raw","readonly","readonly","readonly","readonly","regex","remove","rest","rest","return_type","return_type","return_type","return_type","return_type","return_type","return_type","right","right","right","right","right","right","right","right","self_closing","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","shorthand","source","source","source","source","source_type","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","specifiers","specifiers","statements","static","static","static","static","static_name","static_name","static_property_name","sub","sub_assign","super_class","super_type_parameters","symmetric_difference","tag","tail","test","test","test","test","test","test","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_precision","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","toggle","trailing_comma","trailing_comma","trailing_comma","true_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_parameter","type_parameter","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","types","types","types","union","update","value","value","value","value","value","value","value","value","value","value","value","value","value","without_parenthesized","AstBuilder","accessor_property","alloc","allocator","array_expression","array_pattern","arrow_expression","assignment_expression","assignment_pattern","await_expression","binary_expression","binding_identifier","binding_pattern","block","block_statement","borrow","borrow_mut","break_statement","call_expression","catch_clause","chain_expression","class","class_body","class_declaration","class_expression","computed_member_expression","conditional_expression","continue_statement","debugger_statement","decorator","directive","do_while_statement","empty_statement","export_all_declaration","export_default_declaration","export_named_declaration","expression_statement","for_in_statement","for_of_statement","for_statement","formal_parameter","formal_parameters","from","function","function_body","function_declaration","function_expression","identifier_expression","if_statement","import_declaration","import_expression","into","js_doc_nullable_type","js_doc_unknown_type","jsx_attribute","jsx_closing_element","jsx_closing_fragment","jsx_element","jsx_empty_expression","jsx_expression_container","jsx_fragment","jsx_identifier","jsx_member_expression","jsx_namespaced_name","jsx_opening_element","jsx_opening_fragment","jsx_spread_attribute","jsx_spread_child","jsx_text","labeled_statement","literal_bigint_expression","literal_boolean_expression","literal_null_expression","literal_number_expression","literal_regexp_expression","literal_string_expression","logical_expression","meta_property","module_declaration","new","new_expression","new_str","new_vec","new_vec_single","new_vec_with_capacity","object_expression","object_pattern","parenthesized_expression","private_field_expression","program","property","rest_element","rest_element_pattern","return_statement","sequence_expression","spread_element","static_block","static_member_expression","super_","switch_case","switch_statement","tagged_template_expression","template_literal_expression","this_expression","throw_statement","try_from","try_into","try_statement","ts_any_keyword","ts_array_type","ts_bigint_keyword","ts_boolean_keyword","ts_call_signature_declaration","ts_conditional_type","ts_construct_signature_declaration","ts_constructor_type","ts_enum_declaration","ts_function_type","ts_import_equals_declaration","ts_import_type","ts_index_signature","ts_indexed_access_type","ts_infer_type","ts_interface_body","ts_interface_declaration","ts_interface_heritages","ts_intersection_type","ts_literal_type","ts_mapped_type","ts_method_signature","ts_module_block","ts_module_declaration","ts_never_keyword","ts_non_null_expression","ts_null_keyword","ts_number_keyword","ts_object_keyword","ts_property_signature","ts_string_keyword","ts_symbol_keyword","ts_template_literal_type","ts_this_keyword","ts_tuple_type","ts_type_alias_declaration","ts_type_annotation","ts_type_arguments","ts_type_assertion","ts_type_implement","ts_type_literal","ts_type_operator_type","ts_type_parameter","ts_type_parameters","ts_type_predicate","ts_type_query_type","ts_type_reference","ts_undefined_keyword","ts_union_type","ts_unknown_keyword","ts_void_keyword","type_id","unary_expression","update_expression","variable_declaration","variable_declarator","while_statement","with_statement","yield_expression","Argument","ArrayExpression","ArrayPattern","ArrowExpression","AssignmentExpression","AssignmentPattern","AssignmentTarget","AssignmentTargetWithDefault","AstKind","AwaitExpression","BigintLiteral","BinaryExpression","BindingIdentifier","BlockStatement","BooleanLiteral","BreakStatement","CallExpression","CatchClause","Class","ClassHeritage","ConditionalExpression","ContinueStatement","DebuggerStatement","Decorator","Directive","DoWhileStatement","EmptyStatement","ExpressionStatement","FinallyClause","ForInStatement","ForOfStatement","ForStatement","ForStatementInit","FormalParameter","FormalParameters","Function","FunctionBody","IdentifierName","IdentifierReference","IfStatement","JSXElementName","JSXOpeningElement","LabelIdentifier","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleDeclaration","NewExpression","NullLiteral","NumberLiteral","ObjectExpression","ObjectPattern","ParenthesizedExpression","PrivateIdentifier","Program","Property","PropertyDefinition","PropertyKey","PropertyValue","RegExpLiteral","RestElement","ReturnStatement","Root","SequenceExpression","SimpleAssignmentTarget","SpreadElement","StaticBlock","StringLiteral","Super","SwitchCase","SwitchStatement","TSAnyKeyword","TSAsExpression","TSEnumDeclaration","TSEnumMember","TSImportEqualsDeclaration","TSIndexedAccessType","TSInterfaceDeclaration","TSIntersectionType","TSLiteralType","TSMethodSignature","TSModuleBlock","TSModuleDeclaration","TSNonNullExpression","TSNullKeyword","TSPropertySignature","TSTypeAliasDeclaration","TSTypeAnnotation","TSTypeAssertion","TSTypeLiteral","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeReference","TSUnionType","TSVoidKeyword","TaggedTemplateExpression","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","borrow","borrow_mut","clone","clone_into","eq","fmt","from","identifier_name","into","is_declaration","is_function_like","is_identifier","is_iteration_statement","is_jsx","is_literal","is_statement","is_type","span","to_owned","try_from","try_into","type_id","Ambient","Await","Context","DisallowConditionalTypes","Do","For","If","In","Label","Return","StatementContext","StatementList","While","With","Yield","all","and_ambient","and_await","and_disallow_conditional_types","and_in","and_return","and_yield","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_ambient","has_await","has_disallow_conditional_types","has_in","has_return","has_yield","hash","insert","intersection","intersects","into","into","is_all","is_empty","is_iteration","is_single_statement","is_statement_list","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union_await_if","union_yield_if","All","AllButDefault","Default","Default","Default","ExportEntry","ExportExportName","ExportImportName","ExportLocalName","ImportEntry","ImportImportName","ModuleRecord","Name","Name","Name","Name","NameSpan","NamespaceObject","Null","Null","Null","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","export_default","export_default_duplicated","export_name","exported_bindings","exported_bindings_duplicated","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","import_entries","import_name","import_name","indirect_export_entries","into","into","into","into","into","into","into","into","is_all","is_all_but_default","is_default","is_default","is_default","is_namespace_object","is_null","is_null","local_export_entries","local_name","local_name","module_request","module_request","module_requests","name","name","new","span","span","star_export_entries","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","JavaScript","Jsx","Language","LanguageVariant","Module","ModuleKind","Script","SourceType","SourceTypeError","Standard","TypeScript","UnknownExtension","VALID_EXTENSIONS","always_strict","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default_context","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_path","hash","hash","hash","hash","into","into","into","into","into","is_javascript","is_jsx","is_module","is_script","is_typescript","is_typescript_definition","module_kind","provide","to_compact_string","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_always_strict","with_jsx","with_module","with_script","with_typescript","with_typescript_definition","is_definition_file","GetSpan","Span","borrow","borrow_mut","clone","clone_into","cmp","default","end","eq","fmt","from","hash","into","is_empty","len","new","partial_cmp","serialize","source_text","span","start","to_owned","try_from","try_into","type_id","BoundName","BoundNames","IsSimpleParameterList","PrivateBoundIdentifiers","PropName","bound_name","bound_names","is_simple_parameter_list","private_bound_identifiers","prop_name","Comment","CommentKind","MultiLine","SingleLine","Trivias","add_comment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comments","default","end","eq","fmt","fmt","fmt","from","from","from","has_comments_between","into","into","into","is_multi_line","is_single_line","new","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Visit","enter_node","enter_object_expression","leave_node","visit_argument","visit_array_assignment_target","visit_array_expression","visit_array_pattern","visit_arrow_expression","visit_assignment_expression","visit_assignment_pattern","visit_assignment_target","visit_assignment_target_maybe_default","visit_assignment_target_pattern","visit_assignment_target_property","visit_assignment_target_property_identifier","visit_assignment_target_property_property","visit_assignment_target_with_default","visit_await_expression","visit_bigint_literal","visit_binary_expression","visit_binding_identifier","visit_block_statement","visit_boolean_literal","visit_break_statement","visit_call_expression","visit_catch_clause","visit_chain_element","visit_chain_expression","visit_class","visit_class_body","visit_class_element","visit_class_heritage","visit_computed_member_expression","visit_conditional_expression","visit_continue_statement","visit_debugger_statement","visit_declaration","visit_decorator","visit_directive","visit_do_while_statement","visit_empty_statement","visit_enum","visit_enum_member","visit_export_all_declaration","visit_export_default_declaration","visit_export_named_declaration","visit_expression","visit_expression_match","visit_expression_statement","visit_finally_clause","visit_for_in_statement","visit_for_of_statement","visit_for_statement","visit_for_statement_init","visit_for_statement_left","visit_formal_parameter","visit_formal_parameters","visit_function","visit_function_body","visit_identifier_name","visit_identifier_reference","visit_if_statement","visit_import_declaration","visit_import_declaration_specifier","visit_import_default_specifier","visit_import_expression","visit_import_name_specifier","visit_import_specifier","visit_jsx_attribute","visit_jsx_attribute_item","visit_jsx_attribute_value","visit_jsx_child","visit_jsx_element","visit_jsx_element_name","visit_jsx_expression","visit_jsx_expression_container","visit_jsx_fragment","visit_jsx_opening_element","visit_jsx_spread_attribute","visit_jsx_spread_child","visit_label_identifier","visit_labeled_statement","visit_logical_expression","visit_member_expression","visit_meta_property","visit_method_definition","visit_module_declaration","visit_new_expression","visit_null_literal","visit_number_literal","visit_object_assignment_target","visit_object_expression","visit_object_pattern","visit_object_pattern_property","visit_object_property","visit_parenthesized_expression","visit_pattern","visit_private_field_expression","visit_private_identifier","visit_private_in_expression","visit_program","visit_property","visit_property_definition","visit_property_key","visit_property_value","visit_reg_expr_literal","visit_rest_element","visit_return_statement","visit_sequence_expression","visit_simple_assignment_target","visit_spread_element","visit_statement","visit_statement_match","visit_statements","visit_static_block","visit_static_member_expression","visit_string_literal","visit_super","visit_switch_case","visit_switch_statement","visit_tagged_template_expression","visit_template_element","visit_template_literal","visit_this_expression","visit_throw_statement","visit_try_statement","visit_ts_any_keyword","visit_ts_array_type","visit_ts_as_expression","visit_ts_call_signature_declaration","visit_ts_conditional_type","visit_ts_construct_signature_declaration","visit_ts_constructor_type","visit_ts_function_type","visit_ts_import_equals_declaration","visit_ts_index_signature","visit_ts_index_signature_name","visit_ts_indexed_access_type","visit_ts_instantiation_expression","visit_ts_interface_declaration","visit_ts_intersection_type","visit_ts_literal_type","visit_ts_mapped_type","visit_ts_method_signature","visit_ts_module_block","visit_ts_module_declaration","visit_ts_non_null_expression","visit_ts_null_keyword","visit_ts_property_signature","visit_ts_signature","visit_ts_tuple_element","visit_ts_tuple_type","visit_ts_type","visit_ts_type_alias_declaration","visit_ts_type_annotation","visit_ts_type_assertion","visit_ts_type_literal","visit_ts_type_name","visit_ts_type_operator_type","visit_ts_type_parameter","visit_ts_type_parameter_declaration","visit_ts_type_parameter_instantiation","visit_ts_type_predicate","visit_ts_type_reference","visit_ts_union_type","visit_ts_void_keyword","visit_unary_expression","visit_update_expression","visit_variable_declaration","visit_variable_declarator","visit_while_statement","visit_with_statement","visit_yield_expression","VisitMut","enter_object_expression","visit_argument","visit_array_assignment_target","visit_array_expression","visit_array_pattern","visit_arrow_expression","visit_assignment_expression","visit_assignment_pattern","visit_assignment_target","visit_assignment_target_maybe_default","visit_assignment_target_pattern","visit_assignment_target_property","visit_assignment_target_property_identifier","visit_assignment_target_property_property","visit_assignment_target_with_default","visit_await_expression","visit_bigint_literal","visit_binary_expression","visit_binding_identifier","visit_block_statement","visit_boolean_literal","visit_break_statement","visit_call_expression","visit_catch_clause","visit_chain_element","visit_chain_expression","visit_class","visit_class_body","visit_class_element","visit_class_heritage","visit_computed_member_expression","visit_conditional_expression","visit_continue_statement","visit_debugger_statement","visit_declaration","visit_decorator","visit_directive","visit_do_while_statement","visit_empty_statement","visit_enum","visit_enum_member","visit_export_all_declaration","visit_export_default_declaration","visit_export_named_declaration","visit_expression","visit_expression_match","visit_expression_statement","visit_finally_clause","visit_for_in_statement","visit_for_of_statement","visit_for_statement","visit_for_statement_init","visit_for_statement_left","visit_formal_parameter","visit_formal_parameters","visit_function","visit_function_body","visit_identifier_name","visit_identifier_reference","visit_if_statement","visit_import_declaration","visit_import_declaration_specifier","visit_import_default_specifier","visit_import_expression","visit_import_name_specifier","visit_import_specifier","visit_jsx_attribute","visit_jsx_attribute_item","visit_jsx_attribute_value","visit_jsx_child","visit_jsx_element","visit_jsx_element_name","visit_jsx_expression","visit_jsx_expression_container","visit_jsx_fragment","visit_jsx_opening_element","visit_jsx_spread_attribute","visit_jsx_spread_child","visit_label_identifier","visit_labeled_statement","visit_logical_expression","visit_member_expression","visit_meta_property","visit_method_definition","visit_module_declaration","visit_new_expression","visit_null_literal","visit_number_literal","visit_object_assignment_target","visit_object_expression","visit_object_pattern","visit_object_pattern_property","visit_object_property","visit_parenthesized_expression","visit_pattern","visit_private_field_expression","visit_private_identifier","visit_private_in_expression","visit_program","visit_property","visit_property_definition","visit_property_key","visit_property_value","visit_reg_expr_literal","visit_rest_element","visit_return_statement","visit_sequence_expression","visit_simple_assignment_target","visit_spread_element","visit_statement","visit_statement_match","visit_statements","visit_static_block","visit_static_member_expression","visit_string_literal","visit_super","visit_switch_case","visit_switch_statement","visit_tagged_template_expression","visit_template_element","visit_template_literal","visit_this_expression","visit_throw_statement","visit_try_statement","visit_ts_any_keyword","visit_ts_array_type","visit_ts_as_expression","visit_ts_call_signature_declaration","visit_ts_conditional_type","visit_ts_construct_signature_declaration","visit_ts_constructor_type","visit_ts_function_type","visit_ts_import_equals_declaration","visit_ts_index_signature","visit_ts_index_signature_name","visit_ts_indexed_access_type","visit_ts_instantiation_expression","visit_ts_interface_declaration","visit_ts_intersection_type","visit_ts_literal_type","visit_ts_mapped_type","visit_ts_method_signature","visit_ts_module_block","visit_ts_module_declaration","visit_ts_non_null_expression","visit_ts_null_keyword","visit_ts_property_signature","visit_ts_signature","visit_ts_tuple_element","visit_ts_tuple_type","visit_ts_type","visit_ts_type_alias_declaration","visit_ts_type_annotation","visit_ts_type_assertion","visit_ts_type_literal","visit_ts_type_name","visit_ts_type_operator_type","visit_ts_type_parameter","visit_ts_type_parameter_declaration","visit_ts_type_parameter_instantiation","visit_ts_type_predicate","visit_ts_type_reference","visit_ts_union_type","visit_ts_void_keyword","visit_unary_expression","visit_update_expression","visit_variable_declaration","visit_variable_declarator","visit_while_statement","visit_with_statement","visit_yield_expression"],"q":["oxc_astoxc_ast::astoxc_ast::ast_builderoxc_ast::ast_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::module_record","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::source_type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::source_type::Language","oxc_ast::span","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::syntax_directed_operations","","","","","","","","","","oxc_ast::trivia","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::visitoxc_ast::visit_mutd":["","","A big unsigned integer type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assign a value to a <code>BigUint</code>.","","AST builder for creating AST spans","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in the given position is set","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","ECMAScript Grammar Contexts: [In] [Yield] [Await]","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","","","Returns the argument unchanged.","","","","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>.","","","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>.","","Creates and initializes a <code>BigUint</code>.","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Calculates the Lowest Common Multiple (LCM) of the number …","","Returns <code>(self ^ exponent) % modulus</code>.","Module Record …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Syntax-Directed Operations","","","Returns the byte representation of the <code>BigUint</code> in …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer formatted as a string in the given …","","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Trivia (called that because it’s trivial) represent the …","","","","","","","","","","","","AST Visitor Pattern. See:","AST <code>VisitMut</code> Pattern. See:","","","","","","","","","Section 13.3 Argument","","","Section 13.2.5 Array Expression","","","","Section 15.3 Arrow Function Definitions","https://tc39.es/ecma262/#prod-ArrowFormalParameters","","","Section 13.15 Assignment Expression","","","","","","13.15.5 Destructuring Assignment","","","","","","","","<code>AssignmentProperty</code>[Yield, Await] : <code>IdentifierReference</code>[…","","<code>AssignmentProperty</code>[Yield, Await] : <code>PropertyName</code>[?Yield, …","","","","","","Section 15.8 Await Expression","","","","","","Section 13.6 - 13.13 Binary Expression","","","","Section 13.1 <code>BindingIdentifier</code>","","Section 14.3.3 Destructuring Binding Patterns","","","","","","","","","Section 14.2 Block Statement","","","","","Section 14.9 Break Statement","","Section 13.3 Call Expression","","","","","","","Section 15.7 Class Definitions","","","","","","","","","","","","","Section 13.14 Conditional Expression","","","","","Section 14.8 Continue Statement","","","Section 14.16 Debugger Statement","","","Section 14.3 Declarations and the Variable Statement","","","","","","","Section 11.2.1 Directive Prologue","","","Section 14.7.2 Do-While Statement","","","","","","Section 14.4 Empty Statement","","","","","","","","","","","Exports tc39/ecma262#sec-exports","","","Section 13 Expression","","","","","","","","","Section 14.5 Expression Statement","","","Section 14.7.5 For-In Statement","","Section 14.7.5 For-Of Statement","","Section 14.7.4 For Statement","","","","","https://tc39.es/ecma262/#prod-FormalParameters","","","","","Section 15.2 Function Definitions","","","","","","","","","","","","","","","","","","","","","","","","","","Section 12.6 <code>IdentifierName</code>","","Section 13.1 <code>IdentifierReference</code>","Section 14.6 If Statement","","","","","","","","","","","","","","","","","","","","","","","","","","<code>JSXAttribute</code> : <code>JSXAttributeName</code> <code>JSXAttributeInitializer_opt</code>","<code>JSXAttributes</code> : <code>JSXSpreadAttribute</code> <code>JSXAttributes_opt</code> …","<code>JSXAttributeName</code> : <code>JSXIdentifier</code> <code>JSXNamespacedName</code>","<code>JSXAttributeValue</code> : “ <code>JSXDoubleStringCharacters_opt</code> “ …","<code>JSXChild</code> : <code>JSXText</code> <code>JSXElement</code> <code>JSXFragment</code> { …","<code>JSXClosingElement</code> : &lt; / <code>JSXElementName</code> &gt;","","<code>JSXElement</code> : <code>JSXSelfClosingElement</code> <code>JSXOpeningElement</code> …","","<code>JSXElementName</code> : <code>JSXIdentifier</code> <code>JSXNamespacedName</code> …","","","","<code>JSXFragment</code> : &lt; &gt; <code>JSXChildren_opt</code> &lt; / &gt;","","","<code>JSXMemberExpression</code> : <code>JSXIdentifier</code> . <code>JSXIdentifier</code> …","","<code>JSXNamespacedName</code> : <code>JSXIdentifier</code> : <code>JSXIdentifier</code>","<code>JSXOpeningElement</code> : &lt; <code>JSXElementName</code> <code>JSXAttributes_opt</code> &gt;","","<code>JSXSpreadAttribute</code> : { … <code>AssignmentExpression</code> }","","<code>JSXText</code> :: <code>JSXTextCharacter</code> <code>JSXTextopt</code> <code>JSXTextCharacter</code> :: …","","Section 13.1 <code>LabelIdentifier</code>","Section 14.13 Labelled Statement","","","","","","Section 13.13 Binary Logical Operators","","","","","","","","","Section 13.3 Member Expression","","","","","Section 13.3 Meta Property <code>new.target</code> | <code>import.meta</code>","","","","","","","","","","","Section 16.2.2 Imports","","","","","","","","Section 13.3 New Expression","","","","","","","","","","","","","Section 13.2.6 Object Expression","","","","","","","","","","","","","","","","","","","","","<code>RelationalExpression</code>[In, Yield, Await] : [+In] …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Section 14.10 Return Statement","","","Section 13.16 Sequence Expression","","","","","","","","","","","Part of TypeScript type signatures","","","","","Section 13.3 Spread Element","","","Section 14 Statements","","","","","","","","","","","","","","","","","","","","","Section 14.12 Switch Statement","","","","","","","","","…","","","","","","","","","","","","…","","","","","","","<code>EnumDeclaration</code>: <code>const_opt</code> enum <code>BindingIdentifier</code> …","","","","","","","","","","","","","","","","","","…","","","","","","","<code>InterfaceDeclaration</code>: interface <code>BindingIdentifier</code> …","","","","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","","","…","","","","","","","","","","type C = A; type D = B.a; type E = D.c.b.a;","","","","…","","","","","","","","","","Section 13.2.9 Template Literal","","","","","Section 13.2.2 This Expression","","Section 14.14 Throw Statement","","","Section 14.15 Try Statement","","","","","","Section 13.5 Unary Expression","","","","","","","","https://tc39.es/ecma262/#prod-UniqueFormalParameters","Section 13.4 Update Expression","","","","v flag from …","","","Section 14.3.2 Variable Declaration","","","","","","","Section 14.7.3 While Statement","","Section 14.11 With Statement","","","Section 15.5 Generator Function Definitions","","","","","","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flagseturns the complement of this set of flags.","","","","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","Returns an empty set of flagsetermines whether the given expr evaluate to <code>undefined</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Returns literal’s value converted to the Boolean type …nserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","Determines whether the given expr is a <code>null</code> literal","Determines whether the given expr is a <code>null</code> or <code>undefined</code> …","","<code>PrimaryExpression</code> tc39/ecma262#prod-PrimaryExpression","","","","","","","","","Whether it is a static member access <code>object.property</code>","","Static Semantics: <code>IsStringWellFormedUnicode</code> test for …","","","","","","","","","","Determines whether the given expr is a <code>undefined</code> literal","","Determines whether the given expr is a <code>void 0</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Valid Modifiers: <code>export</code>, <code>declare</code>","Valid modifiers: <code>export</code>, <code>default</code>, <code>async</code>","Valid Modifiers: <code>export</code>, <code>abstract</code>","Valid Modifiers: <code>const</code>, <code>export</code>, <code>declare</code>","Valid Modifiers: <code>declare</code>, <code>export</code>","Valid Modifiers: <code>export</code>, <code>default</code>, <code>declare</code>","Valid Modifiers: <code>declare</code>, <code>export</code>","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get single quasi from <code>template</code>","","","","","","","","","","","Removes the specified flags in-placenserts or removes the specified flags depending on the …eturns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","From boa [spec]: …","","","","","","","","","","Toggles the specified flags in-placeeturns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","Remove nested parentheses from this expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</codeeturns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A declaration file, or inside something with the <code>declare</code> …","[Await] Flag Section 15.8 Async Function Definitions Note …","5.1.5 Grammar Notation A production may be parameterized …","Typescript should parse extends clause as conditional type …","","","","[In] Flag, i.e. the [In] part in RelationalExpression[In, …","","[Return] Flag i.e. the [Return] in Statement[Yield, Await, …","","","","","[Yield] Flag","Returns the set containing all flags.","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","all is used for export * as ns from “mod” declarations.","all-but-default is used for export * from “mod” …","","","","<code>ExportEntry</code>","<code>ExportName</code> for <code>ExportEntry</code>","<code>ImportName</code> for <code>ExportEntry</code>","<code>LocalName</code> for <code>ExportEntry</code>","<code>ImportEntry</code>","<code>ImportName</code> For <code>ImportEntry</code>","Source Text Module Record …","","","","","","","the ExportDeclaration does not have a ModuleSpecifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name used to export this binding by this module.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A List of ImportEntry records derived from the code of …","The name under which the desired binding is exported by …","The name under which the desired binding is exported by …","A List of ExportEntry records derived from the code of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A List of ExportEntry records derived from the code of …","The name that is used to locally access the imported value …","The name that is used to locally access the exported value …","String value of the ModuleSpecifier of the …","The String value of the ModuleSpecifier of the …","…","","","","","Span for the entire export entry","A List of ExportEntry records derived from the code of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts file path to <code>SourceType</code> returns …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Newtype for working with text sizes/ranges. See the …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>BoundName</code>","","<code>IsSimpleParameterList</code>","<code>PrivateBoundIdentifiers</code>","<code>PropName</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to mutate an exclusive borrow of a …if":[0,0,0,[[1,2],1],[[1,3],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,7],1],[[1,5],1],[[1,3],1],[[1,1],1],[[1,2],1],[[1,5],1],[[1,2],1],[[1,1],1],[[1,6],1],[[1,1],1],[[1,6],1],[[1,7],1],[[1,6],1],[[1,4],1],[[1,4],1],[[1,5],1],[[1,1],1],[[1,3],1],[[1,3],1],[[1,4],1],[[1,7],1],[[1,4]],[[1,2]],[[1,7]],[[1,1]],[[1,1]],[[1,6]],[[1,3]],[[1,5]],[1],0,0,0,[[]],[[]],[[1,6],8],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[1,6],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[]],[[]],[1,1],[1,1],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[1,1],[[1,1]],[[]],[[1,1],10],0,[1,6],[[],1],[[1,4],1],[[1,4],1],[[1,3],1],[[1,2],1],[[1,1],1],[[1,6],1],[[1,7],1],[[1,6],1],[[1,3],1],[[1,5],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,1],1],[[1,2],1],[[1,2],1],[[1,7],1],[[1,5],1],[[1,2],1],[[1,1],1],[[1,7],1],[[1,3],1],[[1,7],1],[[1,1],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,5]],[[1,1]],[[1,2]],[[1,4]],[[1,6]],[[1,1]],[[1,7]],[[1,3]],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[1,1],8],[[1,1],8],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[2,1],[7,1],[5,1],[[]],[4,1],[6,1],[3,1],[[],1],[[],1],[14,[[9,[1]]]],[15,[[9,[1]]]],[16,[[9,[1]]]],[3,[[9,[1]]]],[3,[[9,[1]]]],[[],1],[17,[[13,[1,18]]]],[[17,3],[[13,[1,18]]]],[7,[[9,[1]]]],[6,[[9,[1]]]],[[1,1],1],[[1,1]],[1],[[]],[1,8],[[1,1],8],[1,8],[1,8],[1,8],[1,19],[1,20],[[1,1],1],[[1,1],1],[[1,1,1],1],0,[[1,1],1],[[1,2],1],[[1,4],1],[[1,3],1],[[1,7],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,7],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,1],1],[[1,2],1],[[1,6],1],[[1,7],1],[[1,5],1],[[1,4],1],[[1,4],1],[[1,1],1],[[1,3],1],[[1,5],1],[[1,2],1],[[1,6],1],[[1,1],1],[[1,3],1],[[1,3],1],[[1,6],1],[[1,1]],[[1,5]],[[1,6]],[[1,1]],[[1,3]],[[1,4]],[[1,2]],[[1,7]],[[[22,[3,21]]],1],[[1,1],1],[[1,3],1],[[1,3],1],[[],1],[3,[[9,[1]]]],[[1,1],[[9,[10]]]],[[1,2],1],[[1,1],1],[[1,4],1],[[1,5],1],[[1,3],1],[[1,5],1],[[1,6],1],[[1,1],1],[[1,6],1],[[1,1],1],[[1,7],1],[[1,4],1],[[1,3],1],[[1,5],1],[[1,3],1],[[1,7],1],[[1,6],1],[[1,2],1],[[1,4],1],[[1,2],1],[[1,3],1],[[1,7],1],[[1,3],1],[[1,7],1],[[1,2],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,1],1],[[1,1],1],[23,1],[[1,6],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,3],1],[[1,2],1],[[1,1],1],[[1,5],1],[[1,2],1],[[1,4],1],[[1,6],1],[[1,2],1],[[1,6],1],[[1,7],1],[[1,3],1],[[1,1],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,5],1],[[1,7],1],[[1,2],1],[[1,4],1],[[1,1],1],[[1,3],1],[[1,5],1],[[1,7],1],[[1,3],1],[[1,3]],[[1,2]],[[1,6]],[[1,7]],[[1,1]],[[1,4]],[[1,1]],[[1,5]],[[1,6,8]],[1],[1],[[1,3],1],[[1,4],1],[[1,4],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,24],1],[[1,25],1],[[1,15],1],[[1,3],1],[[1,25],1],[[1,24],1],[[1,16],1],[[1,16],1],[[1,26],1],[[1,7],1],[[1,27],1],[[1,27],1],[[1,25],1],[[1,5],1],[[1,15],1],[[1,16],1],[[1,2],1],[[1,6],1],[[1,6],1],[[1,2],1],[[1,15],1],[[1,26],1],[[1,2],1],[[1,6],1],[[1,7],1],[[1,5],1],[[1,2],1],[[1,5],1],[[1,7],1],[[1,7],1],[[1,3],1],[[1,15],1],[[1,16],1],[[1,25],1],[[1,4],1],[[1,26],1],[[1,24],1],[[1,24],1],[[1,27],1],[[1,26],1],[[1,27],1],[[1,3],1],[[1,4]],[[1,15]],[[1,25]],[[1,7]],[[1,2]],[[1,16]],[[1,3]],[[1,26]],[[1,24]],[[1,5]],[[1,25]],[[1,16]],[[1,3]],[[1,6]],[[1,26]],[[1,27]],[[1,7]],[[1,4]],[[1,27]],[[1,5]],[[1,24]],[[1,6]],[[1,2]],[[1,15]],[[1,16],1],[[1,5],1],[[1,24],1],[[1,4],1],[[1,27],1],[[1,7],1],[[1,2],1],[[1,15],1],[[1,2],1],[[1,26],1],[[1,25],1],[[1,24],1],[[1,25],1],[[1,6],1],[[1,15],1],[[1,16],1],[[1,27],1],[[1,25],1],[[1,7],1],[[1,26],1],[[1,3],1],[[1,27],1],[[1,15],1],[[1,6],1],[[1,3],1],[[1,3],1],[[1,27],1],[[1,26],1],[[1,25],1],[[1,15],1],[[1,26],1],[[1,5],1],[[1,24],1],[[1,7],1],[[1,4],1],[[1,16],1],[[1,16],1],[[1,6],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,24],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,5],1],[[1,3],1],[[1,2],1],[[1,6]],[[1,4]],[[1,15]],[[1,27]],[[1,2]],[[1,25]],[[1,4]],[[1,3]],[[1,26]],[[1,16]],[[1,25]],[[1,5]],[[1,6]],[[1,7]],[[1,16]],[[1,2]],[[1,27]],[[1,7]],[[1,5]],[[1,3]],[[1,24]],[[1,26]],[[1,15]],[[1,24]],0,0,[1,1],[1,1],[[1,5],1],[[1,6],1],[[1,6],1],[[1,3],1],[[1,6],1],[[1,2],1],[[1,1],1],[[1,2],1],[[1,1],1],[[1,5],1],[[1,7],1],[[1,4],1],[[1,3],1],[[1,3],1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,2],1],[[1,6],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,5],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,5],1],[[1,1]],[[1,1]],[[1,4]],[[1,5]],[[1,6]],[[1,7]],[[1,2]],[[1,3]],[23,1],0,[1,[[9,[28]]]],[1,[[9,[1]]]],[1,[[22,[2,21]]]],[1,[[22,[2,21]]]],[[],29],[1,[[9,[30]]]],[1,[[9,[14]]]],[1,[[9,[15]]]],[1,[[9,[16]]]],[[]],[[1,3],[[22,[2,21]]]],[[1,3],[[22,[2,21]]]],[[1,3],31],[[],31],[1,[[9,[7]]]],[1,[[22,[3,21]]]],[1,[[9,[6]]]],[1,[[22,[6,21]]]],[1,6],[1,[[9,[6]]]],0,[24,[[13,[1,32]]]],[25,[[13,[1,32]]]],[28,[[13,[1,32]]]],[28,[[13,[1,[32,[28]]]]]],[15,[[13,[1,32]]]],[16,[[13,[1,32]]]],[[],13],[27,[[13,[1,32]]]],[26,[[13,[1,32]]]],[[],13],[[],33],0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35,36],[37,17],[38,17],[39,17],[40,17],[41,17],[42,17],0,0,0,0,0,0,0,0,0,0,0,[[34,34],34],[[34,34]],[[34,34],34],[[34,34]],[34,2],[[34,34],34],[[34,34]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[9,[44]]]],[45,[[9,[44]]]],[44,[[22,[44]]]],[46,[[22,[44]]]],[47,[[22,[44]]]],[48,[[22,[44]]]],[49,[[22,[44]]]],[50,[[22,[44]]]],[51,[[22,[44]]]],[52,[[22,[44]]]],[43,[[22,[44]]]],[53,[[22,[44]]]],[54,[[22,[44]]]],[45,[[22,[44]]]],[55,[[22,[44]]]],[56,[[22,[44]]]],[57,[[22,[44]]]],0,0,0,0,0,0,[58,58],[59,59],[44,44],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[37,37],[69,69],[70,70],[71,71],[72,72],[73,73],[34,34],[74,74],[75,75],[76,76],[77,77],[38,38],[39,39],[40,40],[41,41],[42,42],[78,78],[79,79],[80,80],[81,81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[34,34],10],[82,[[9,[75]]]],[34,34],[83,8],0,0,0,0,0,0,0,0,0,0,[[34,34],8],[[84,80],8],0,0,0,0,0,0,0,0,0,[[],84],0,0,0,0,[[34,34],34],0,0,0,0,0,0,0,0,0,0,[[],34],[[],84],[[85,85],8],[[86,86],8],[[58,58],8],[[59,59],8],[[44,44],8],[[60,60],8],[[87,87],8],[[88,88],8],[[89,89],8],[[90,90],8],[[91,91],8],[[92,92],8],[[93,93],8],[[61,61],8],[[94,94],8],[[95,95],8],[[96,96],8],[[97,97],8],[[98,98],8],[[99,99],8],[[100,100],8],[[101,101],8],[[82,82],8],[[102,102],8],[[103,103],8],[[104,104],8],[[105,105],8],[[106,106],8],[[107,107],8],[[108,108],8],[[109,109],8],[[110,110],8],[[111,111],8],[[112,112],8],[[113,113],8],[[114,114],8],[[115,115],8],[[116,116],8],[[117,117],8],[[118,118],8],[[119,119],8],[[120,120],8],[[121,121],8],[[122,122],8],[[123,123],8],[[124,124],8],[[125,125],8],[[126,126],8],[[127,127],8],[[128,128],8],[[129,129],8],[[130,130],8],[[131,131],8],[[46,46],8],[[47,47],8],[[62,62],8],[[132,132],8],[[133,133],8],[[134,134],8],[[135,135],8],[[136,136],8],[[137,137],8],[[138,138],8],[[139,139],8],[[140,140],8],[[141,141],8],[[142,142],8],[[143,143],8],[[144,144],8],[[145,145],8],[[146,146],8],[[147,147],8],[[148,148],8],[[149,149],8],[[150,150],8],[[151,151],8],[[152,152],8],[[153,153],8],[[48,48],8],[[154,154],8],[[49,49],8],[[50,50],8],[[155,155],8],[[51,51],8],[[52,52],8],[[43,43],8],[[63,63],8],[[53,53],8],[[54,54],8],[[64,64],8],[[156,156],8],[[157,157],8],[[158,158],8],[[45,45],8],[[65,65],8],[[159,159],8],[[83,83],8],[[160,160],8],[[161,161],8],[[66,66],8],[[67,67],8],[[162,162],8],[[55,55],8],[[163,163],8],[[164,164],8],[[165,165],8],[[56,56],8],[[166,166],8],[[167,167],8],[[168,168],8],[[169,169],8],[[170,170],8],[[35,35],8],[[57,57],8],[[171,171],8],[[172,172],8],[[173,173],8],[[174,174],8],[[68,68],8],[[175,175],8],[[176,176],8],[[177,177],8],[[178,178],8],[[179,179],8],[[180,180],8],[[181,181],8],[[182,182],8],[[183,183],8],[[184,184],8],[[185,185],8],[[186,186],8],[[187,187],8],[[188,188],8],[[189,189],8],[[190,190],8],[[191,191],8],[[192,192],8],[[193,193],8],[[194,194],8],[[195,195],8],[[196,196],8],[[197,197],8],[[198,198],8],[[37,37],8],[[69,69],8],[[70,70],8],[[71,71],8],[[72,72],8],[[73,73],8],[[34,34],8],[[74,74],8],[[75,75],8],[[76,76],8],[[77,77],8],[[38,38],8],[[39,39],8],[[40,40],8],[[41,41],8],[[42,42],8],[[199,199],8],[[200,200],8],[[201,201],8],[[202,202],8],[[203,203],8],[[204,204],8],[[205,205],8],[[206,206],8],[[207,207],8],[[208,208],8],[[209,209],8],[[210,210],8],[[211,211],8],[[212,212],8],[[213,213],8],[[214,214],8],[[215,215],8],[[216,216],8],[[217,217],8],[[218,218],8],[[219,219],8],[[220,220],8],[[221,221],8],[[222,222],8],[[223,223],8],[[224,224],8],[[225,225],8],[[226,226],8],[[227,227],8],[[228,228],8],[[229,229],8],[[230,230],8],[[231,231],8],[[232,232],8],[[233,233],8],[[234,234],8],[[235,235],8],[[236,236],8],[[237,237],8],[[238,238],8],[[239,239],8],[[78,78],8],[[240,240],8],[[241,241],8],[[242,242],8],[[243,243],8],[[244,244],8],[[245,245],8],[[246,246],8],[[79,79],8],[[247,247],8],[[248,248],8],[[249,249],8],[[250,250],8],[[251,251],8],[[252,252],8],[[253,253],8],[[254,254],8],[[255,255],8],[[256,256],8],[[257,257],8],[[258,258],8],[[259,259],8],[[260,260],8],[[261,261],8],[[262,262],8],[[263,263],8],[[264,264],8],[[265,265],8],[[266,266],8],[[267,267],8],[[268,268],8],[[269,269],8],[[270,270],8],[[271,271],8],[[272,272],8],[[80,80],8],[[273,273],8],[[84,84],8],[[274,274],8],[[275,275],8],[[276,276],8],[[81,81],8],[86,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,277]],0,0,0,0,0,0,[[85,11],278],[[86,11],278],[[58,11],278],[[59,11],278],[[44,11],278],[[60,11],278],[[87,11],278],[[88,11],278],[[89,11],278],[[90,11],278],[[91,11],278],[[92,11],278],[[93,11],278],[[61,11],278],[[94,11],278],[[95,11],278],[[96,11],278],[[97,11],278],[[98,11],278],[[99,11],278],[[100,11],278],[[101,11],278],[[82,11],278],[[102,11],278],[[103,11],278],[[104,11],278],[[105,11],278],[[106,11],278],[[107,11],278],[[108,11],278],[[109,11],278],[[110,11],278],[[111,11],278],[[112,11],278],[[113,11],278],[[114,11],278],[[115,11],278],[[116,11],278],[[117,11],278],[[118,11],278],[[119,11],278],[[120,11],278],[[121,11],278],[[122,11],278],[[123,11],278],[[124,11],278],[[125,11],278],[[126,11],278],[[127,11],278],[[128,11],278],[[129,11],278],[[130,11],278],[[131,11],278],[[46,11],278],[[47,11],278],[[62,11],278],[[62,11],278],[[132,11],278],[[133,11],278],[[134,11],278],[[135,11],278],[[136,11],278],[[137,11],278],[[138,11],278],[[139,11],278],[[140,11],278],[[141,11],278],[[142,11],278],[[143,11],278],[[144,11],278],[[145,11],278],[[146,11],278],[[147,11],278],[[148,11],278],[[149,11],278],[[150,11],278],[[151,11],278],[[152,11],278],[[153,11],278],[[48,11],278],[[154,11],278],[[49,11],278],[[50,11],278],[[155,11],278],[[51,11],278],[[52,11],278],[[43,11],278],[[63,11],278],[[53,11],278],[[54,11],278],[[64,11],278],[[156,11],278],[[157,11],278],[[158,11],278],[[45,11],278],[[65,11],278],[[159,11],278],[[83,11],278],[[160,11],278],[[161,11],278],[[66,11],278],[[67,11],278],[[162,11],278],[[55,11],278],[[163,11],278],[[164,11],278],[[165,11],278],[[56,11],278],[[166,11],278],[[167,11],278],[[168,11],278],[[169,11],278],[[170,11],278],[[35,11],278],[[57,11],278],[[171,11],278],[[172,11],278],[[173,11],278],[[174,11],278],[[68,11],278],[[68,11],278],[[175,11],278],[[176,11],278],[[177,11],278],[[178,11],278],[[179,11],278],[[180,11],278],[[181,11],278],[[182,11],278],[[183,11],278],[[184,11],278],[[185,11],278],[[186,11],278],[[187,11],278],[[188,11],278],[[189,11],278],[[190,11],278],[[191,11],278],[[192,11],278],[[193,11],278],[[194,11],278],[[195,11],278],[[196,11],278],[[197,11],278],[[198,11],278],[[37,11],278],[[69,11],278],[[70,11],278],[[71,11],278],[[72,11],278],[[73,11],278],[[73,11],278],[[34,11],278],[[34,11],278],[[34,11],278],[[34,11],278],[[34,11],278],[[34,11],278],[[74,11],278],[[75,11],278],[[76,11],278],[[77,11],278],[[38,11],278],[[38,11],278],[[39,11],278],[[39,11],278],[[40,11],278],[[40,11],278],[[41,11],278],[[41,11],278],[[42,11],278],[[42,11],278],[[199,11],278],[[200,11],278],[[201,11],278],[[202,11],278],[[203,11],278],[[204,11],278],[[205,11],278],[[206,11],278],[[207,11],278],[[208,11],278],[[209,11],278],[[210,11],278],[[211,11],278],[[212,11],278],[[213,11],278],[[214,11],278],[[215,11],278],[[216,11],278],[[217,11],278],[[218,11],278],[[219,11],278],[[220,11],278],[[221,11],278],[[222,11],278],[[223,11],278],[[224,11],278],[[225,11],278],[[226,11],278],[[227,11],278],[[228,11],278],[[229,11],278],[[230,11],278],[[231,11],278],[[232,11],278],[[233,11],278],[[234,11],278],[[235,11],278],[[236,11],278],[[237,11],278],[[238,11],278],[[239,11],278],[[78,11],278],[[240,11],278],[[241,11],278],[[242,11],278],[[243,11],278],[[244,11],278],[[245,11],278],[[246,11],278],[[79,11],278],[[247,11],278],[[248,11],278],[[249,11],278],[[250,11],278],[[251,11],278],[[252,11],278],[[253,11],278],[[254,11],278],[[255,11],278],[[256,11],278],[[257,11],278],[[258,11],278],[[259,11],278],[[260,11],278],[[261,11],278],[[262,11],278],[[263,11],278],[[264,11],278],[[265,11],278],[[266,11],278],[[267,11],278],[[268,11],278],[[269,11],278],[[270,11],278],[[271,11],278],[[272,11],278],[[80,11],278],[[273,11],278],[[84,11],278],[[274,11],278],[[275,11],278],[[276,11],278],[[81,11],278],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,77],[38,77],[41,77],[42,77],[[]],[40,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[9,[34]]]],[2,34],[2,34],[277,34],[17,[[9,[210]]]],0,0,[86,[[9,[8]]]],[114,[[9,[86]]]],[232,58],[86,[[9,[59]]]],[86,86],[185,195],0,[85],[86],[58],[59],[44],[60],[87],[88],[89],[90],[91],[92],[93],[61],[94],[95],[96],[97],[98],[99],[100],[101],[82],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[129],[130],[131],[46],[47],[62],[132],[133],[134],[135],[136],[137],[138],[139],[140],[141],[142],[143],[144],[145],[146],[147],[148],[149],[150],[151],[152],[153],[48],[154],[49],[50],[155],[51],[52],[43],[63],[53],[54],[64],[156],[157],[158],[45],[65],[159],[83],[160],[161],[66],[67],[162],[55],[163],[164],[165],[56],[166],[167],[168],[169],[170],[35],[57],[171],[172],[173],[174],[68],[175],[176],[177],[178],[179],[180],[181],[182],[183],[184],[185],[186],[187],[188],[189],[190],[191],[192],[193],[194],[195],[196],[197],[198],[37],[69],[70],[71],[72],[73],[34],[74],[75],[76],[77],[38],[39],[40],[41],[42],[199],[200],[201],[202],[203],[204],[205],[206],[207],[208],[209],[210],[211],[212],[213],[214],[215],[216],[217],[218],[219],[220],[221],[222],[223],[224],[225],[226],[227],[228],[229],[230],[231],[232],[233],[234],[235],[236],[237],[238],[239],[78],[240],[241],[242],[243],[244],[245],[246],[79],[247],[248],[249],[250],[251],[252],[253],[254],[255],[256],[257],[258],[259],[260],[261],[262],[263],[264],[265],[266],[267],[268],[269],[270],[271],[272],[80],[273],[84],[274],[275],[276],[81],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,34]],[[34,34],34],[[34,34],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,8],[38,8],[39,8],[41,8],[38,8],[39,8],[41,8],[39,8],[62,8],[232,8],[205,8],[43,8],[45,8],[45,8],[113,8],[154,8],[85,8],[53,8],[156,8],[34,8],[39,8],[163,8],0,[43,8],[45,8],[8,8],[86,8],[43,8],[232,8],[39,8],[41,8],[62,8],[86,8],[38,8],[94,8],[84,8],[86,8],[86,8],[39,8],[86,8],[92,8],[232,8],[39,8],[82,8],[154,8],[53,8],[[86,17],8],[[86,17,17],8],[[98,17,17],8],[86,8],[75,8],[82,8],[43,8],[83,8],[81,8],0,[46,8],[43,8],[57,8],[174,8],[86,8],[81,8],[86,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[83,[[9,[66]]]],0,0,0,0,0,0,0,0,[118,[[9,[36]]]],[68,36],[254,36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[279,14,17,76],70],[[[280,[273]]],84],[34,34],[98,86],0,0,0,0,0,0,0,0,[41,77],0,0,0,0,0,0,0,[98,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,34],[[9,[10]]]],0,0,0,0,0,[83,[[9,[67]]]],[160,[[9,[67]]]],[161,[[9,[67]]]],[164,[[9,[67]]]],[90,9],[91,9],[92,9],[83,9],[160,9],[161,9],0,0,0,0,0,0,0,0,[83,[[9,[92]]]],0,[94,[[9,[36]]]],0,0,0,0,0,0,0,0,0,0,[[34,34]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[85,281],13],[[86,281],13],[[58,281],13],[[59,281],13],[[44,281],13],[[60,281],13],[[87,281],13],[[88,281],13],[[89,281],13],[[90,281],13],[[91,281],13],[[92,281],13],[[93,281],13],[[61,281],13],[[94,281],13],[[95,281],13],[[96,281],13],[[97,281],13],[[98,281],13],[[82,281],13],[[102,281],13],[[103,281],13],[[104,281],13],[[105,281],13],[[106,281],13],[[107,281],13],[[108,281],13],[[109,281],13],[[110,281],13],[[111,281],13],[[112,281],13],[[113,281],13],[[114,281],13],[[115,281],13],[[116,281],13],[[117,281],13],[[118,281],13],[[119,281],13],[[120,281],13],[[121,281],13],[[122,281],13],[[123,281],13],[[124,281],13],[[125,281],13],[[126,281],13],[[127,281],13],[[128,281],13],[[129,281],13],[[130,281],13],[[131,281],13],[[46,281],13],[[47,281],13],[[62,281],13],[[132,281],13],[[133,281],13],[[134,281],13],[[135,281],13],[[136,281],13],[[137,281],13],[[138,281],13],[[139,281],13],[[140,281],13],[[141,281],13],[[142,281],13],[[143,281],13],[[144,281],13],[[145,281],13],[[146,281],13],[[147,281],13],[[148,281],13],[[149,281],13],[[150,281],13],[[151,281],13],[[152,281],13],[[153,281],13],[[48,281],13],[[154,281],13],[[49,281],13],[[50,281],13],[[155,281],13],[[51,281],13],[[52,281],13],[[43,281],13],[[63,281],13],[[53,281],13],[[54,281],13],[[156,281],13],[[157,281],13],[[158,281],13],[[45,281],13],[[65,281],13],[[159,281],13],[[83,281],13],[[160,281],13],[[161,281],13],[[66,281],13],[[67,281],13],[[162,281],13],[[55,281],13],[[163,281],13],[[164,281],13],[[165,281],13],[[56,281],13],[[166,281],13],[[167,281],13],[[168,281],13],[[169,281],13],[[170,281],13],[[35,281],13],[[57,281],13],[[171,281],13],[[172,281],13],[[173,281],13],[[174,281],13],[[68,281],13],[[175,281],13],[[176,281],13],[[177,281],13],[[178,281],13],[[179,281],13],[[180,281],13],[[181,281],13],[[182,281],13],[[183,281],13],[[184,281],13],[[185,281],13],[[186,281],13],[[187,281],13],[[188,281],13],[[189,281],13],[[190,281],13],[[191,281],13],[[192,281],13],[[193,281],13],[[194,281],13],[[195,281],13],[[196,281],13],[[197,281],13],[[198,281],13],[[37,281],13],[[69,281],13],[[70,281],13],[[71,281],13],[[72,281],13],[[73,281],13],[[34,281],13],[[74,281],13],[[75,281],13],[[77,281],13],[[38,281],13],[[39,281],13],[[40,281],13],[[41,281],13],[[42,281],13],[[199,281],13],[[200,281],13],[[201,281],13],[[202,281],13],[[203,281],13],[[204,281],13],[[205,281],13],[[206,281],13],[[207,281],13],[[208,281],13],[[209,281],13],[[210,281],13],[[211,281],13],[[212,281],13],[[213,281],13],[[214,281],13],[[215,281],13],[[216,281],13],[[217,281],13],[[218,281],13],[[219,281],13],[[220,281],13],[[221,281],13],[[222,281],13],[[223,281],13],[[224,281],13],[[225,281],13],[[226,281],13],[[227,281],13],[[228,281],13],[[229,281],13],[[230,281],13],[[231,281],13],[[232,281],13],[[233,281],13],[[234,281],13],[[235,281],13],[[236,281],13],[[237,281],13],[[238,281],13],[[239,281],13],[[78,281],13],[[240,281],13],[[241,281],13],[[242,281],13],[[243,281],13],[[244,281],13],[[245,281],13],[[246,281],13],[[79,281],13],[[247,281],13],[[248,281],13],[[249,281],13],[[250,281],13],[[251,281],13],[[252,281],13],[[253,281],13],[[254,281],13],[[255,281],13],[[256,281],13],[[257,281],13],[[258,281],13],[[259,281],13],[[260,281],13],[[261,281],13],[[262,281],13],[[263,281],13],[[264,281],13],[[265,281],13],[[266,281],13],[[267,281],13],[[268,281],13],[[269,281],13],[[270,281],13],[[271,281],13],[[272,281],13],[[80,281],13],[[273,281],13],[[84,281],13],[[274,281],13],[[275,281],13],[[276,281],13],[[81,281],13],[[34,34,8]],0,0,0,0,0,0,[86,279],[90,279],[92,279],[93,279],[98,279],[105,279],[113,279],[114,279],[129,279],[46,279],[139,279],[48,279],[154,279],[155,279],[83,279],[35,279],[174,279],[68,279],[183,279],[205,279],[244,279],[254,279],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[83,8],0,0,0,[92,[[9,[36]]]],[83,[[9,[36]]]],[98,[[9,[17]]]],[[34,34],34],[[34,34]],0,0,[[34,34],34],0,0,0,0,0,0,0,0,[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[70,[9,[5]]],[[9,[31]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[34,34]],0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,34],34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[86,86],0,[[282,279,92,[9,[86]],8,8],83],[282,283],0,[[282,279,[280,[[9,[105]]]],[9,[279]]],86],[[282,279,[280,[[9,[48]]]]],154],[[282,279,8,8,8,[283,[53]],[283,[156]],[9,[[283,[236]]]],[9,[[283,[202]]]]],86],[[282,279,38,113,86],86],[[282,279,48,86],48],[[282,279,86],86],[[282,279,86,39,86],86],[[282,44],154],[[282,154,[9,[[283,[202]]]],8],48],[[282,279,[280,[129]]],[[283,[131]]]],[[282,[283,[131]]],129],[[]],[[]],[[282,279,[9,[60]]],129],[[282,279,86,[280,[105]],8,[9,[[283,[234]]]]],86],[[282,279,[9,[48]],[283,[131]]],[[283,[152]]]],[[282,279,127],86],[[282,65,279,[9,[44]],[9,[86]],[283,[159]],[9,[[283,[236]]]],[9,[[283,[234]]]],[9,[[280,[[283,[240]]]]]],[280,[272]],84],[[283,[45]]]],[[282,279,[280,[83]]],[[283,[159]]]],[[282,[283,[45]]],129],[[282,[283,[45]]],86],[[282,279,86,86,8],86],[[282,279,86,86,86],86],[[282,279,[9,[60]]],129],[[282,279],129],[[282,279,86],272],[[282,279,75,17],130],[[282,279,129,86],129],[[282,279],129],[[282,[9,[68]],75,[9,[[280,[170]]]],[9,[81]]],[[283,[172]]]],[[282,174,68],[[283,[171]]]],[[282,[9,[46]],[280,[173]],[9,[75]],[9,[81]]],[[283,[57]]]],[[282,279,86],129],[[282,279,142,86,129],129],[[282,279,8,142,86,129],129],[[282,279,[9,[139]],[9,[86]],[9,[86]],129],129],[[282,279,48,[9,[78]],8,[280,[272]]],54],[[282,279,64,[280,[54]]],[[283,[53]]]],[[]],[[282,63,279,[9,[44]],8,8,8,[283,[53]],[9,[[283,[156]]]],[9,[[283,[236]]]],[9,[[283,[202]]]],84],[[283,[43]]]],[[282,279,[280,[130]],[280,[129]]],[[283,[156]]]],[[282,[283,[43]]],129],[[282,[283,[43]]],86],[[282,59],86],[[282,279,86,129,[9,[129]]],129],[[282,[280,[166]],75,[9,[[280,[170]]]],[9,[81]]],[[283,[56]]]],[[282,279,86,[280,[86]]],86],[[]],[[282,279,205,8],205],[[282,279],205],[[282,279,193,[9,[194]]],[[283,[191]]]],[[282,279,183],[[283,[179]]]],[[282,279],182],[[282,279,[283,[178]],[9,[[283,[179]]]],[280,[196]]],[[283,[177]]]],[[282,279],189],[[282,279,188],187],[[282,279,181,182,[280,[196]]],[[283,[180]]]],[[282,279,36],195],[[282,279,186,195],[[283,[185]]]],[[282,279,195,195],[[283,[184]]]],[[282,279,8,183,[280,[190]],[9,[[283,[234]]]]],[[283,[178]]]],[[282,279],181],[[282,279,86],[[283,[192]]]],[[282,279,86],197],[[282,279,36],198],[[282,279,60,129],129],[[282,71],86],[[282,37],86],[[282,69],86],[[282,70],86],[[282,72],86],[[282,75],86],[[282,279,86,40,86],86],[[282,279,58,58],86],[[282,279,163],129],[284,282],[[282,279,86,[280,[105]],[9,[[283,[234]]]]],86],[[282,17],17],[282,280],[282,280],[[282,5],280],[[282,279,[280,[90]],[9,[279]]],86],[[282,279,[280,[155]]],154],[[282,279,86],86],[[282,279,86,67,8],86],[[282,279,[280,[130]],[280,[129]],285],85],[[282,279,61,92,93,8,8,8],[[283,[91]]]],[[282,279,48],[[283,[52]]]],[[282,[283,[52]]],48],[[282,279,[9,[86]]],129],[[282,279,[280,[86]]],86],[[282,279,86],[[283,[104]]]],[[282,279,[280,[129]]],83],[[282,279,86,58,8],86],[[282,279],86],[[282,279,[9,[86]],[280,[129]]],148],[[282,279,86,[280,[148]]],129],[[282,279,86,94,[9,[[283,[234]]]]],86],[[282,94],86],[[282,279],86],[[282,279,86],129],[[],13],[[],13],[[282,279,[283,[131]],[9,[[283,[152]]]],[9,[[283,[131]]]]],129],[[282,279],205],[[282,279,205],205],[[282,279],205],[[282,279],205],[[282,279,[283,[53]],[9,[[283,[202]]]],[9,[[283,[236]]]]],244],[[282,279,205,205,205,205],205],[[282,279,[283,[53]],[9,[[283,[202]]]],[9,[[283,[236]]]]],244],[[282,279,8,[283,[53]],[283,[202]],[9,[[283,[236]]]]],205],[[282,279,44,[280,[200]],84],46],[[282,279,[283,[53]],[283,[202]],[9,[[283,[236]]]]],205],[[282,279,44,269,8,81],46],[[282,279,8,205,[9,[232]],[9,[[283,[234]]]]],205],[[282,279,[280,[[283,[249]]]],[283,[202]]],244],[[282,279,205,205],205],[[282,279,[283,[235]]],205],[[282,279,[280,[244]]],[[283,[242]]]],[[282,279,44,[283,[242]],[9,[[283,[236]]]],[9,[[280,[[283,[250]]]]]],84],46],[[282,280],[[280,[[283,[250]]]]]],[[282,279,[280,[205]]],205],[[282,279,204],205],[[282,279,[283,[235]],[9,[205]],205,264,264],205],[[282,279,92,8,8,79,[283,[53]],[9,[[283,[202]]]],[9,[[283,[236]]]]],244],[[282,279,[280,[129]]],[[283,[256]]]],[[282,279,254,255,84],[[283,[253]]]],[[282,279],205],[[282,279,86],86],[[282,279],205],[[282,279],205],[[282,279],205],[[282,279,8,8,8,92,[9,[[283,[202]]]]],244],[[282,279],205],[[282,279],205],[[282,279,[280,[96]],[280,[205]]],205],[[282,279],205],[[282,279,[280,[217]]],205],[[282,279,44,205,[9,[[283,[236]]]],84],46],[[282,279,205],[[283,[202]]]],[[282,279,[280,[205]]],[[283,[234]]]],[[282,279,205,86],86],[[282,279,232,[9,[[283,[234]]]]],[[283,[240]]]],[[282,279,[280,[244]]],205],[[282,279,210,205],205],[[282,279,44,[9,[205]],[9,[205]],8,8],[[283,[235]]]],[[282,279,[280,[[283,[235]]]]],[[283,[236]]]],[[282,279,252,8,[9,[[283,[202]]]]],205],[[282,279,232,[9,[[283,[234]]]]],205],[[282,279,232,[9,[[283,[234]]]]],205],[[282,279],205],[[282,279,[280,[205]]],205],[[282,279],205],[[282,279],205],[[],33],[[282,279,41,8,86],86],[[282,279,42,8,114],86],[[282,279,62,[280,[132]],84],[[283,[47]]]],[[282,279,62,48,[9,[86]],8],132],[[282,279,86,129],129],[[282,279,86,129],129],[[282,279,8,[9,[86]]],86],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[286,286],[[]],[[286,286],8],[[286,11],278],[[]],[286,[[9,[36]]]],[[]],[286,8],[286,8],[286,8],[286,8],[286,8],[286,8],[286,8],[286,8],[286,279],[[]],[[],13],[[],13],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],287],[[287,8],287],[[287,8],287],[[287,8],287],[[287,8],287],[[287,8],287],[[287,8],287],[[287,287],287],[[287,287]],[[287,287],287],[[287,287]],[287,2],[[287,287],287],[[287,287]],[[]],[[]],[[]],[[]],[287,287],[288,288],[[]],[[]],[[287,287],10],[287,287],[[287,287],8],[[],287],[[287,287],287],[[],287],[[287,287],8],[[288,288],8],[[287,277]],[[287,11],278],[[287,11],278],[[287,11],278],[[287,11],278],[[287,11],278],[[288,11],278],[[]],[[]],[2,[[9,[287]]]],[2,287],[2,287],[277,287],[287,8],[287,8],[287,8],[287,8],[287,8],[287,8],[287],[[287,287]],[[287,287],287],[[287,287],8],[[]],[[]],[287,8],[287,8],[288,8],[288,8],[288,8],[287,287],[[287,287],[[9,[10]]]],[[287,287]],[[287,287,8]],[[287,287],287],[[287,287]],[[287,287],287],[[]],[[]],[[287,287]],[[],13],[[],13],[[],13],[[],13],[[],33],[[],33],[[287,287],287],[[287,8],287],[[287,8],287],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[289,289],[290,290],[291,291],[292,292],[293,293],[294,294],[295,295],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],296],[[],292],[[],293],[[],294],[[],295],[[289,289],8],[[290,290],8],[[291,291],8],[[292,292],8],[[293,293],8],[[294,294],8],[[295,295],8],0,0,0,0,0,[[296,11],278],[[289,11],278],[[290,11],278],[[291,11],278],[[292,11],278],[[293,11],278],[[294,11],278],[[295,11],278],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[293,8],[293,8],[291,8],[294,8],[295,8],[291,8],[294,8],[295,8],0,0,0,0,0,0,[289,36],[295,[[9,[36]]]],[[36,279],289],[289,279],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,[285,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[285,285],[297,297],[298,298],[299,299],[[]],[[]],[[]],[[]],[[],285],[285,287],[[285,285],8],[[297,297],8],[[298,298],8],[[299,299],8],[[285,11],278],[[297,11],278],[[298,11],278],[[299,11],278],[[300,11],278],[[300,11],278],[[]],[[]],[[]],[[]],[[]],[[[302,[301]]],[[13,[285,300]]]],[285],[297],[298],[299],[[]],[[]],[[]],[[]],[[]],[285,8],[285,8],[285,8],[285,8],[285,8],[285,8],[285,298],[303],[[],29],[[]],[[]],[[]],[[]],[[],31],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],33],[[],33],[[],33],[[],33],[[],33],[[285,8],285],[[285,8],285],[[285,8],285],[[285,8],285],[[285,8],285],[[285,8],285],0,0,0,[[]],[[]],[279,279],[[]],[[279,279],10],[[],279],0,[[279,279],8],[[279,11],278],[[]],[279],[[]],[279,8],[279,3],[[3,3],279],[[279,279],[[9,[10]]]],[[279,281],13],[[279,17],17],[[],279],0,[[]],[[],13],[[],13],[[],33],0,0,0,0,0,[[],[[9,[44]]]],[[],[[22,[44]]]],[[],8],[[],[[9,[67]]]],[[],9],0,0,0,0,0,[[304,279,305]],[[]],[[]],[[]],[[]],[[]],[[]],[306,306],[305,305],[[]],[[]],[304,307],[[],304],[306,3],[[305,305],8],[[304,11],278],[[306,11],278],[[305,11],278],[[]],[[]],[[]],[[304,279],8],[[]],[[]],[[]],[306,8],[306,8],[[3,305],306],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],33],[[],33],[[],33],0,[286],[89],[286],[105],[116],[88],[51],[157],[112],[49],[113],[118],[115],[120],[121],[122],[119],[125],[71],[108],[44],[131],[37],[144],[82],[152],[127],[126],[45],[159],[83],[86],[99],[111],[143],[153],[46],[272],[130],[136],[133],[199],[200],[172],[171],[57],[86],[86],[134],[131],[140],[141],[138],[139],[142],[54],[53],[43],[156],[58],[59],[135],[56],[166],[168],[165],[169],[167],[191],[190],[194],[196],[177],[183],[188],[187],[180],[178],[192],[197],[60],[149],[110],[98],[103],[160],[55],[102],[69],[70],[117],[89],[50],[155],[90],[128],[48],[101],[67],[109],[85],[91],[161],[92],[93],[72],[52],[145],[123],[114],[104],[129],[129],[280],[162],[100],[75],[124],[148],[147],[95],[96],[94],[87],[150],[151],[218],[211],[266],[246],[206],[248],[262],[261],[268],[245],[249],[212],[276],[241],[208],[203],[263],[247],[256],[253],[271],[224],[243],[244],[217],[213],[205],[237],[202],[267],[257],[232],[209],[235],[236],[234],[251],[231],[207],[226],[107],[106],[47],[132],[137],[146],[158],0,[89],[105],[116],[88],[51],[157],[112],[49],[113],[118],[115],[120],[121],[122],[119],[125],[71],[108],[44],[131],[37],[144],[82],[152],[127],[126],[45],[159],[83],[86],[99],[111],[143],[153],[46],[272],[130],[136],[133],[199],[200],[172],[171],[57],[86],[86],[134],[131],[140],[141],[138],[139],[142],[54],[53],[43],[156],[58],[59],[135],[56],[166],[168],[165],[169],[167],[191],[190],[194],[196],[177],[183],[188],[187],[180],[178],[192],[197],[60],[149],[110],[98],[103],[160],[55],[102],[69],[70],[117],[89],[50],[155],[90],[128],[48],[101],[67],[109],[85],[91],[161],[92],[93],[72],[52],[145],[123],[114],[104],[129],[129],[280],[162],[100],[75],[124],[148],[147],[95],[96],[94],[87],[150],[151],[218],[211],[266],[246],[206],[248],[262],[261],[268],[245],[249],[212],[276],[241],[208],[203],[263],[247],[256],[253],[271],[224],[243],[244],[217],[213],[205],[237],[202],[267],[257],[232],[209],[235],[236],[234],[251],[231],[207],[226],[107],[106],[47],[132],[137],[146],[158]],"p":[[3,"BigUint"],[15,"u8"],[15,"u32"],[15,"u16"],[15,"usize"],[15,"u64"],[15,"u128"],[15,"bool"],[4,"Option"],[4,"Ordering"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"f64"],[15,"i128"],[15,"i64"],[15,"str"],[3,"ParseBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[3,"Global"],[3,"Vec"],[8,"Iterator"],[15,"i32"],[15,"i16"],[15,"isize"],[15,"i8"],[3,"BigInt"],[3,"CompactString"],[15,"f32"],[3,"String"],[3,"TryFromBigIntError"],[3,"TypeId"],[3,"RegExpFlags"],[4,"ImportAttributeKey"],[6,"Atom"],[3,"BooleanLiteral"],[4,"AssignmentOperator"],[4,"BinaryOperator"],[4,"LogicalOperator"],[4,"UnaryOperator"],[4,"UpdateOperator"],[3,"Function"],[3,"BindingIdentifier"],[3,"Class"],[4,"Declaration"],[3,"VariableDeclaration"],[3,"BindingPattern"],[3,"AssignmentPattern"],[3,"ObjectPattern"],[3,"ArrayPattern"],[3,"RestElement"],[3,"FormalParameters"],[3,"FormalParameter"],[3,"ModuleDeclaration"],[3,"ImportDeclaration"],[3,"ExportNamedDeclaration"],[3,"IdentifierName"],[3,"IdentifierReference"],[3,"LabelIdentifier"],[4,"PropertyKind"],[4,"VariableDeclarationKind"],[4,"FunctionType"],[4,"FormalParameterKind"],[4,"ClassType"],[4,"MethodDefinitionKind"],[3,"PrivateIdentifier"],[4,"ModuleExportName"],[3,"NullLiteral"],[3,"NumberLiteral"],[3,"BigintLiteral"],[3,"RegExpLiteral"],[3,"RegExp"],[3,"EmptyObject"],[3,"StringLiteral"],[4,"NumberBase"],[4,"Operator"],[4,"TSAccessibility"],[4,"TSMethodSignatureKind"],[4,"ModifierKind"],[4,"ImportOrExportKind"],[3,"CallExpression"],[4,"ClassElement"],[3,"Modifiers"],[3,"Program"],[4,"Expression"],[3,"ThisExpression"],[3,"ArrayExpression"],[3,"ObjectExpression"],[4,"ObjectProperty"],[3,"Property"],[4,"PropertyKey"],[4,"PropertyValue"],[3,"TemplateLiteral"],[3,"TaggedTemplateExpression"],[3,"TemplateElement"],[3,"TemplateElementValue"],[4,"MemberExpression"],[3,"ComputedMemberExpression"],[3,"StaticMemberExpression"],[3,"PrivateFieldExpression"],[3,"NewExpression"],[3,"MetaProperty"],[3,"SpreadElement"],[4,"Argument"],[3,"UpdateExpression"],[3,"UnaryExpression"],[3,"BinaryExpression"],[3,"PrivateInExpression"],[3,"LogicalExpression"],[3,"ConditionalExpression"],[3,"AssignmentExpression"],[4,"AssignmentTarget"],[4,"SimpleAssignmentTarget"],[4,"AssignmentTargetPattern"],[3,"ArrayAssignmentTarget"],[3,"ObjectAssignmentTarget"],[4,"AssignmentTargetMaybeDefault"],[3,"AssignmentTargetWithDefault"],[4,"AssignmentTargetProperty"],[3,"AssignmentTargetPropertyIdentifier"],[3,"AssignmentTargetPropertyProperty"],[3,"SequenceExpression"],[3,"Super"],[3,"AwaitExpression"],[3,"ChainExpression"],[4,"ChainElement"],[3,"ParenthesizedExpression"],[4,"Statement"],[3,"Directive"],[3,"BlockStatement"],[3,"VariableDeclarator"],[3,"EmptyStatement"],[3,"ExpressionStatement"],[3,"IfStatement"],[3,"DoWhileStatement"],[3,"WhileStatement"],[3,"ForStatement"],[4,"ForStatementInit"],[3,"ForInStatement"],[3,"ForOfStatement"],[4,"ForStatementLeft"],[3,"ContinueStatement"],[3,"BreakStatement"],[3,"ReturnStatement"],[3,"WithStatement"],[3,"SwitchStatement"],[3,"SwitchCase"],[3,"LabeledStatement"],[3,"ThrowStatement"],[3,"TryStatement"],[3,"CatchClause"],[3,"DebuggerStatement"],[4,"BindingPatternKind"],[4,"ObjectPatternProperty"],[3,"FunctionBody"],[3,"ArrowExpression"],[3,"YieldExpression"],[3,"ClassBody"],[3,"MethodDefinition"],[3,"PropertyDefinition"],[3,"StaticBlock"],[4,"ModuleDeclarationKind"],[3,"AccessorProperty"],[3,"ImportExpression"],[4,"ImportDeclarationSpecifier"],[3,"ImportSpecifier"],[3,"ImportDefaultSpecifier"],[3,"ImportNamespaceSpecifier"],[3,"ImportAttribute"],[3,"ExportDefaultDeclaration"],[3,"ExportAllDeclaration"],[3,"ExportSpecifier"],[4,"ExportDefaultDeclarationKind"],[3,"JSDocNullableType"],[3,"JSDocUnknownType"],[3,"JSXElement"],[3,"JSXOpeningElement"],[3,"JSXClosingElement"],[3,"JSXFragment"],[3,"JSXOpeningFragment"],[3,"JSXClosingFragment"],[4,"JSXElementName"],[3,"JSXNamespacedName"],[3,"JSXMemberExpression"],[4,"JSXMemberExpressionObject"],[3,"JSXExpressionContainer"],[4,"JSXExpression"],[3,"JSXEmptyExpression"],[4,"JSXAttributeItem"],[3,"JSXAttribute"],[3,"JSXSpreadAttribute"],[4,"JSXAttributeName"],[4,"JSXAttributeValue"],[3,"JSXIdentifier"],[4,"JSXChild"],[3,"JSXSpreadChild"],[3,"JSXText"],[3,"TSEnumDeclaration"],[3,"TSEnumMember"],[4,"TSEnumMemberName"],[3,"TSTypeAnnotation"],[3,"TSLiteralType"],[4,"TSLiteral"],[4,"TSType"],[3,"TSConditionalType"],[3,"TSUnionType"],[3,"TSIntersectionType"],[3,"TSTypeOperatorType"],[4,"TSTypeOperator"],[3,"TSArrayType"],[3,"TSIndexedAccessType"],[3,"TSTupleType"],[3,"TSNamedTupleMember"],[3,"TSOptionalType"],[3,"TSRestType"],[4,"TSTupleElement"],[3,"TSAnyKeyword"],[3,"TSStringKeyword"],[3,"TSBooleanKeyword"],[3,"TSNumberKeyword"],[3,"TSNeverKeyword"],[3,"TSUnknownKeyword"],[3,"TSNullKeyword"],[3,"TSUndefinedKeyword"],[3,"TSVoidKeyword"],[3,"TSSymbolKeyword"],[3,"TSThisKeyword"],[3,"TSObjectKeyword"],[3,"TSBigIntKeyword"],[3,"TSTypeReference"],[4,"TSTypeName"],[3,"TSQualifiedName"],[3,"TSTypeParameterInstantiation"],[3,"TSTypeParameter"],[3,"TSTypeParameterDeclaration"],[3,"TSTypeAliasDeclaration"],[3,"TSAbstractMethodDefinition"],[3,"TSAbstractPropertyDefinition"],[3,"TSClassImplements"],[3,"TSInterfaceDeclaration"],[3,"TSInterfaceBody"],[3,"TSPropertySignature"],[4,"TSSignature"],[3,"TSIndexSignature"],[3,"TSCallSignatureDeclaration"],[3,"TSMethodSignature"],[3,"TSConstructSignatureDeclaration"],[3,"TSIndexSignatureName"],[3,"TSInterfaceHeritage"],[3,"TSTypePredicate"],[4,"TSTypePredicateName"],[3,"TSModuleDeclaration"],[4,"TSModuleDeclarationName"],[4,"TSModuleDeclarationBody"],[3,"TSModuleBlock"],[3,"TSTypeLiteral"],[3,"TSInferType"],[3,"TSTypeQuery"],[3,"TSImportType"],[3,"TSFunctionType"],[3,"TSConstructorType"],[3,"TSMappedType"],[4,"TSMappedTypeModifierOperator"],[3,"TSTemplateLiteralType"],[3,"TSAsExpression"],[3,"TSTypeAssertion"],[3,"TSImportEqualsDeclaration"],[4,"TSModuleReference"],[3,"TSExternalModuleReference"],[3,"TSNonNullExpression"],[3,"Decorator"],[3,"Modifier"],[3,"TSExportAssignment"],[3,"TSNamespaceExportDeclaration"],[3,"TSInstantiationExpression"],[8,"IntoIterator"],[6,"Result"],[3,"Span"],[3,"Vec"],[8,"Serializer"],[3,"AstBuilder"],[3,"Box"],[3,"Allocator"],[3,"SourceType"],[4,"AstKind"],[3,"Context"],[4,"StatementContext"],[3,"NameSpan"],[3,"ImportEntry"],[4,"ImportImportName"],[3,"ExportEntry"],[4,"ExportImportName"],[4,"ExportExportName"],[4,"ExportLocalName"],[3,"ModuleRecord"],[4,"Language"],[4,"ModuleKind"],[4,"LanguageVariant"],[4,"SourceTypeError"],[3,"Path"],[8,"AsRef"],[3,"Demand"],[3,"Trivias"],[4,"CommentKind"],[3,"Comment"],[3,"BTreeMap"],[13,"TypeScript"],[8,"GetSpan"],[8,"BoundName"],[8,"BoundNames"],[8,"IsSimpleParameterList"],[8,"PrivateBoundIdentifiers"],[8,"PropName"],[8,"Visit"],[8,"VisitMut"]]},\
"oxc_benchmark":{"doc":"","t":"DLLMLLLMLMLLLM","n":["Code","borrow","borrow_mut","file_name","from","get_source_text","into","measurement_time","new","source_text","try_from","try_into","type_id","url"],"q":["oxc_benchmark","","","","","","","","","","","","",""],"d":["","","","","Returns the argument unchanged.","Errors","Calls <code>U::from(self)</code>.","","Errors","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],0,[[]],[1,[[3,[2]]]],[[]],0,[[4,1],[[3,[5,2]]]],0,[[],3],[[],3],[[],6],0],"p":[[15,"str"],[3,"String"],[4,"Result"],[15,"u64"],[3,"Code"],[3,"TypeId"]]},\
"oxc_cli":{"doc":"","t":"EDNDNNDLLLLLLLLFLLLLLLLLLLLLMLLLLLLLMMLLLLLLLLLMLLMMMLLLLLLLLLLLLLLMMMMMM","n":["CliRunResult","LintOptions","LintResult","LintRunner","None","PathNotFound","Walk","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fix","fmt","fmt","from","from","from","from","from","ignore_path","ignore_pattern","init","init","init","init","into","into","into","into","iter","max_warnings","new","new","no_ignore","paths","quiet","report","run","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","duration","max_warnings_exceeded","number_of_diagnostics","number_of_files","number_of_warnings","paths"],"q":["oxc_cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_cli::CliRunResult","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Panics","","","","","Panics","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,0,6,6,0,10,8,3,6,10,8,3,6,0,10,8,3,6,10,8,3,6,10,8,3,6,3,3,6,10,8,3,3,6,3,3,10,8,3,6,10,8,3,6,8,3,10,8,3,3,3,6,10,10,8,3,6,10,8,3,6,10,8,3,6,14,14,14,14,14,15],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,[[3,4],5],[[6,4],5],[[]],[[]],[7,3],[[]],[[]],0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[8,9],0,[3,10],[3,8],0,0,0,[6,11],[10,6],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0],"p":[[3,"Command"],[15,"usize"],[3,"LintOptions"],[3,"Formatter"],[6,"Result"],[4,"CliRunResult"],[3,"ArgMatches"],[3,"Walk"],[8,"Iterator"],[3,"LintRunner"],[3,"ExitCode"],[4,"Result"],[3,"TypeId"],[13,"LintResult"],[13,"PathNotFound"]]},\
"oxc_coverage":{"doc":"","t":"DDDDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AppArgs","BabelCase","BabelSuite","PrinterTest262Case","Suite","Test262Case","Test262Suite","TypeScriptCase","TypeScriptSuite","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","coverage_report","coverage_report","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detail","diff","drop","drop","drop","drop","drop","drop","drop","drop","filter","fmt","from","from","from","from","from","from","from","from","get_test_cases","get_test_cases","get_test_cases","get_test_cases","get_test_root","get_test_root","get_test_root","get_test_root","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","meta","new","new","new","print_coverage","print_coverage","project_root","read_metadata","read_test_cases","read_test_cases","run","run","save_test_cases","save_test_cases","save_test_cases","save_test_cases","set_result","skip_test_path","skip_test_path","skip_test_path","skip_test_path","snapshot_errors","snapshot_errors","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["oxc_coverage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A Test Suite is responsible for reading code from a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Print mismatch diff","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Errors","Errors","Panics","Errors","","","","","","","","","","","","","","Errors","Errors","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,20,20,1,2,3,4,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,4,4,1,17,18,2,10,3,19,4,4,4,1,17,18,2,10,3,19,4,20,1,2,3,20,1,2,3,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,10,1,2,3,20,20,0,10,20,20,20,20,20,1,2,3,10,20,1,2,3,20,20,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[1,[0]]]],[[],[[2,[0]]]],[[],[[3,[0]]]],[[],4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,[5],[5],[5],[5],[5],[5],[5],[5],0,[[4,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[1,[0]]],8],[[[2,[0]]],8],[[[3,[0]]],8],[[],9],[[[1,[0]]],9],[[[2,[0]]],9],[[[3,[0]]],9],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[1,[0]]]],[[],[[2,[0]]]],[[],[[3,[0]]]],0,0,[[],13],[11,[[12,[0]]]],[4],[4],[[11,4]],[[11,4]],[8],[[[1,[0]],[8,[0]]]],[[[2,[0]],[8,[0]]]],[[[3,[0]],[8,[0]]]],0,[9,14],[[[1,[0]],9],14],[[[2,[0]],9],14],[[[3,[0]],9],14],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16]],"p":[[3,"BabelSuite"],[3,"Test262Suite"],[3,"TypeScriptSuite"],[3,"AppArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Path"],[3,"Test262Case"],[15,"str"],[6,"Result"],[3,"PathBuf"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"BabelCase"],[3,"PrinterTest262Case"],[3,"TypeScriptCase"],[8,"Suite"]]},\
"oxc_diagnostics":{"doc":"Diagnostics Wrapper Exports <code>thiserror</code> and <code>miette</code>","t":"DGDDGGGLLLLLLLLLLLLLLLLLLLLLLLLCLLCLLLLLLLLLLLLLL","n":["Diagnostics","Error","MinifiedFileError","Redeclaration","Report","Result","Severity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","fmt","fmt","fmt","fmt","fmt","from","from","from","help","into","into","into","into_inner","labels","miette","provide","provide","thiserror","to_compact_string","to_compact_string","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oxc_diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Panics","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,4,5,1,4,5,1,1,1,1,1,4,4,5,5,1,4,5,5,1,4,5,1,4,0,4,5,0,4,5,1,4,5,1,4,5,1,4,5,1,4,5],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[[],1],[1],[[1,2],3],[[4,2],3],[[4,2],3],[[5,2],3],[[5,2],3],[[]],[[]],[[]],[5,[[8,[[7,[6]]]]]],[[]],[[]],[[]],[1,[[10,[9]]]],[4,[[8,[[7,[11]]]]]],0,[12],[12],0,[[],13],[[],13],[[]],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16]],"p":[[3,"Diagnostics"],[3,"Formatter"],[6,"Result"],[3,"Redeclaration"],[3,"MinifiedFileError"],[8,"Display"],[3,"Box"],[4,"Option"],[6,"Error"],[3,"Vec"],[8,"Iterator"],[3,"Demand"],[3,"CompactString"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"oxc_linter":{"doc":"","t":"DDDLLLLLLLMLLLLLLLLLLLLLLALLLLLLLLLLLLLSNSNIEILLLLLLLLLLLLLLLL","n":["Fixer","Linter","Message","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","end","error","fix","fmt","fmt","from","from","from","from_json_str","from_rules","into","into","into","new","new","new","rule","run","run_early_error","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_fix","CATEGORY","Correctness","NAME","Nursery","Rule","RuleCategory","RuleMeta","borrow","borrow_mut","clone","clone_into","documentation","eq","fmt","from","from_configuration","into","run","run_on_symbol","to_owned","try_from","try_into","type_id"],"q":["oxc_linter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_linter::rule","","","","","","","","","","","","","","","","","","","","","",""],"d":["The fixer of the code. Note that our parser has handled …","","","","","","","","","","","Panics","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Initialize from eslint json configuration","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,3,1,6,3,1,6,1,1,3,1,6,3,1,6,6,6,3,1,6,3,1,6,0,6,6,1,3,1,6,3,1,6,3,1,6,6,19,15,19,15,0,0,0,15,15,15,15,19,15,15,15,20,15,20,20,15,15,15,15],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],0,0,[[1,4],5],[[6,4],5],[[]],[[]],[[]],[7,6],[[[8,[0]]],6],[[]],[[]],[[]],[[7,[8,[1]]],3],[[9,[10,[0]]],1],[[],6],0,[[6,11,7],[[8,[1]]]],[[6,11,7,12],[[8,[1]]]],[1,2],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[6,12],6],0,0,0,0,0,0,0,[[]],[[]],[15,15],[[]],[[],[[10,[7]]]],[[15,15],12],[[15,4],5],[[]],[16],[[]],0,0,[[]],[[],13],[[],13],[[],14]],"p":[[3,"Message"],[15,"u32"],[3,"Fixer"],[3,"Formatter"],[6,"Result"],[3,"Linter"],[15,"str"],[3,"Vec"],[6,"Error"],[4,"Option"],[3,"Rc"],[15,"bool"],[4,"Result"],[3,"TypeId"],[4,"RuleCategory"],[4,"Value"],[6,"AstNode"],[3,"Symbol"],[8,"RuleMeta"],[8,"Rule"]]},\
"oxc_macros":{"doc":"","t":"OOO","n":["declare_all_lint_rules","declare_oxc_lint","declare_oxc_lint_test"],"q":["oxc_macros","",""],"d":["","Macro used to declare an oxc lint rule","Same as <code>declare_oxc_lint</code>, but doesn’t do imports. …"],"i":[0,0,0],"f":[0,0,0],"p":[]},\
"oxc_parser":{"doc":"Recursive Descent Parser for ECMAScript and TypeScript","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLL","n":["Parser","ParserReturn","allow_return_outside_function","asi","at","at_async_no_new_line","at_function_with_async","at_start_of_ts_declaration","borrow","borrow","borrow_mut","borrow_mut","bump","bump_any","bump_remap","can_insert_semicolon","check_identifier","checkpoint","cur_kind","cur_src","cur_string","cur_token","current_range","eat","eat_decorators","eat_modifiers_before_declaration","end_span","errors","expect","expect_jsx_attribute_value","expect_jsx_child","expect_without_advance","fmt","from","from","into","into","is_at_enum_declaration","is_at_interface_declaration","is_at_named_tuple_element","is_at_ts_declare_clause","is_at_ts_index_signature_member","is_next_at_type_member_name","is_nth_at_modifier","is_nth_at_ts_namespace_declaration","is_parenthesized_arrow_function","is_parenthesized_arrow_function_expression","lookahead","new","nth","nth_at","nth_kind","panicked","parse","parse_array_expression","parse_arrow_function_body","parse_assignment_expression","parse_assignment_expression_base","parse_binding_element","parse_binding_identifier","parse_binding_pattern","parse_block","parse_block_statement","parse_class_declaration","parse_class_element","parse_class_element_modifiers","parse_class_expression","parse_class_statement","parse_computed_property_name","parse_declaration","parse_decorator","parse_directives_and_statements","parse_export_declaration","parse_expression","parse_expression_statement","parse_formal_parameters","parse_function","parse_function_body","parse_function_declaration","parse_function_expression","parse_function_id","parse_function_impl","parse_heritage_clause","parse_identifier_expression","parse_identifier_kind","parse_identifier_name","parse_identifier_reference","parse_import_declaration","parse_import_expression","parse_import_specifier","parse_jsx_expression","parse_keyword_identifier","parse_label_identifier","parse_let","parse_lhs_expression","parse_literal_bigint","parse_literal_boolean","parse_literal_expression","parse_literal_null","parse_literal_number","parse_literal_regexp","parse_literal_string","parse_method","parse_module_export_name","parse_object_expression","parse_object_pattern_property","parse_paren_expression","parse_parenthesized_arrow_function","parse_parenthesized_arrow_function_head","parse_private_identifier","parse_property_definition","parse_property_name","parse_rest_element","parse_single_param_function_expression","parse_spread_element","parse_statement_list_item","parse_switch_case","parse_template_element","parse_ts_call_signature_member","parse_ts_constructor_signature_member","parse_ts_declaration_statement","parse_ts_declare_function","parse_ts_enum_declaration","parse_ts_enum_member","parse_ts_export_assignment_declaration","parse_ts_export_namespace","parse_ts_function_impl","parse_ts_getter_signature_member","parse_ts_global_declaration","parse_ts_implements_clause","parse_ts_import_equals_declaration","parse_ts_index_signature_member","parse_ts_interface_declaration","parse_ts_namespace_or_module_declaration","parse_ts_namespace_or_module_declaration_body","parse_ts_property_or_method_signature_member","parse_ts_qualified_name","parse_ts_return_type","parse_ts_return_type_annotation","parse_ts_setter_signature_member","parse_ts_this_parameter","parse_ts_type","parse_ts_type_alias_declaration","parse_ts_type_annotation","parse_ts_type_arguments","parse_ts_type_arguments_in_expression","parse_ts_type_assertion","parse_ts_type_parameter","parse_ts_type_parameters","parse_ts_type_signature","parse_ts_variable_annotation","parse_unary_expression_base","parse_variable_declaration","parse_variable_statement","parse_yield_expression","peek_at","peek_kind","peek_token","program","re_lex_jsx_identifier","re_lex_right_angle","re_lex_template_substitution_tail","re_lex_ts_l_angle","re_lex_ts_r_angle","read_regex","rewind","start_span","trivias","try_from","try_from","try_into","try_into","try_parse","type_id","type_id","with_context","without_context"],"q":["oxc_parserd":["","The parser always return a valid AST. When <code>panicked = true</code>…","","Automatic Semicolon Insertion …","Checks if the current index has token <code>Kind</code>","","","","","","","","Advance and return true if we are at <code>Kind</code>","Advance any token","Advance and change token type, useful for changing keyword …","","","","Get current Kind","Get current source text","Get current string","Get current token","","Advance and return true if we are at <code>Kind</code>, return false …","","","","","Expect a <code>Kind</code> or return error","Expect the next next token to be a <code>JsxString</code> or any other …","Expect the next next token to be a <code>JsxChild</code>, i.e. <code>&lt;</code> or <code>{</code> …","Errors","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","—————–– Enum —————— ","","","———————– declare ——————— ","Must be at <code>[ident:</code> or <code>&lt;modifiers&gt; [ident:</code>","","","","","","","","Peek nth token","Peek at nth kind","Peek nth kind","","Parser main entry point Returns an empty <code>Program</code> on …","Section Array Expression …","<code>ConciseBody</code> [lookahead ≠ {] <code>ExpressionBody</code>[?In, ~Await] …","<code>AssignmentExpression</code>[In, Yield, Await] :","","<code>BindingElement</code> <code>SingleNameBinding</code> <code>BindingPattern</code> Initializer","<code>BindingIdentifier</code> : Identifier","Destructuring Binding Patterns <code>LexicalBinding</code> …","Section 14.2 Block Statement","","Section 15.7 Class Definitions","","","Section Class Definitions …","","<code>ComputedPropertyName</code>[Yield, Await] : [ <code>AssignmentExpression</code>…","","<code>Decorator</code>[Yield, Await]: [ <code>DecoratorMemberExpression</code>[…","<code>https://tc39.es/ecma262/#prod-StatementList</code> <code>StatementList</code>[…","Exports <code>https://tc39.es/ecma262/#sec-exports</code>","Section Expression …","Section 14.5 Expression Statement","","","","Function Declaration","Function Expression","","Parse function implementation in Javascript, cursor at …","","<code>PrimaryExpression</code>: Identifier Reference","","","","Section 16.2.2 Import Declaration","Import Call <code>ImportCall</code> : import ( <code>AssignmentExpression</code> )","","","Parse keyword kind as identifier","","","Section 13.3 Left-Hand-Side Expression","","","Literal Expression parses string | true | false | null | …","","","","","Section 15.4 Method Definitions <code>ClassElementName</code> ( …","","Object Expression <code>ObjectLiteral</code>[Yield, Await] : { } { …","","","Section Arrow Function …","","Section <code>https://tc39.es/ecma262/#prod-PrivateIdentifier</code> …","<code>PropertyDefinition</code>[Yield, Await]","<code>PropertyName</code>[Yield, Await] : <code>LiteralPropertyName</code> …","Section 14.3.3 Binding Rest Property","","<code>PropertyDefinition</code>[Yield, Await] : … <code>AssignmentExpression</code>…","<code>StatementListItem</code>[Yield, Await, Return] : Statement[…","","","","","","","<code>https://www.typescriptlang.org/docs/handbook/enums.html</code>","","","","Parse function implementation in Typescript, cursor at …","","","","","","———————  Interface  ———————— ","","","","","","","","","","","—————–– Annotation —————– ","","","","","","","","Section 13.5 Unary Expression","","Section 14.3.2 Variable Statement","Section 15.5 Yield Expression yield yield [no …","Peek at kind","Peek next kind, returns EOF for final peek","Peek next token, returns EOF for final peek","","Tell lexer to re-read a jsx identifier","","Tell lexer to read a template substitution tail","","","Tell lexer to read a regex","","","","","","","","Errors","","","",""],"i":[0,0,1,1,1,1,1,1,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,8,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,8,1,8,1,1,8,1,1],"f":[0,0,[[1,2],1],[1,3],0,[1,2],[1,2],[1,2],[[]],[[]],[[]],[[]],0,[1],0,[1,2],[[1,4,5]],0,0,[1,6],[1,[[7,[6]]]],0,[1,4],0,[1,3],[1],[[1,4],4],0,0,0,0,0,[[8,9],10],[[]],[[]],[[]],[[]],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[[1,11,2],2],[[1,11],2],0,0,[[1,12]],[[13,6,14],1],0,0,0,0,[1,8],[1,[[3,[15]]]],[[1,4,[7,[[17,[16]]]],[17,[18]],[7,[[17,[19]]]],2],[[3,[15]]]],[1,[[3,[15]]]],[1,[[3,[15]]]],[1,[[3,[20]]]],[1,[[3,[21]]]],[1,3],[1,[[3,[[17,[22]]]]]],[1,[[3,[23]]]],[[1,4,24],[[3,[[17,[25]]]]]],[1,[[3,[26]]]],0,[1,[[3,[15]]]],[[1,27,4],[[3,[23]]]],[1,[[3,[15]]]],[[1,4,24],[[3,[28]]]],[1,[[3,[29]]]],[[1,2],3],[1,[[3,[23]]]],[1,[[3,[15]]]],[[1,4,15],[[3,[23]]]],[[1,30],[[3,[[17,[18]]]]]],0,[1,[[3,[[17,[32]]]]]],[[1,27],[[3,[23]]]],[[1,4,2],[[3,[15]]]],0,0,[1,3],[1,[[3,[15]]]],0,[1,[[3,[33]]]],[1,[[3,[34]]]],[1,[[3,[23]]]],[[1,4],[[3,[15]]]],[1,[[3,[35]]]],[1,[[3,[15]]]],0,[1,[[3,[36]]]],[[1,27],[[3,[23]]]],[1,[[3,[15]]]],[1,[[3,[37]]]],[1,[[3,[38]]]],[1,[[3,[15]]]],[1,39],[1,[[3,[40]]]],[1,[[3,[41]]]],[1,[[3,[42]]]],[[1,2,2],[[3,[[17,[31]]]]]],[1,[[3,[43]]]],[1,[[3,[15]]]],[1,[[3,[44]]]],[1,[[3,[15]]]],[1,[[3,[15]]]],[1,3],[1,45],[1,[[3,[[17,[44]]]]]],[1,3],[1,[[3,[[17,[46]]]]]],[[1,4,2,2],[[3,[15]]]],[1,[[3,[[17,[47]]]]]],[[1,27],[[3,[23]]]],[1,[[3,[48]]]],[[1,2],49],[1,[[3,[50]]]],[1,[[3,[50]]]],[[1,4],[[3,[23]]]],[[1,4,24],[[3,[[17,[31]]]]]],[[1,4,24],[[3,[28]]]],[1,[[3,[51]]]],[1,[[3,[[17,[52]]]]]],[1,[[3,[[17,[53]]]]]],0,[1,[[3,[50]]]],[[1,4,24],[[3,[[17,[54]]]]]],[1,[[3,[[56,[[17,[55]]]]]]]],[[1,4,2],[[3,[28]]]],[1,[[3,[50]]]],[[1,4,24],[[3,[28]]]],[[1,24],[[3,[[17,[54]]]]]],[[1,4,24],[[3,[[17,[54]]]]]],[1,[[3,[50]]]],[1,[[3,[57]]]],[1,[[3,[58]]]],[1,[[3,[[7,[[17,[19]]]]]]]],[1,[[3,[50]]]],[1,3],[1,[[3,[58]]]],[[1,4,24],[[3,[28]]]],[1,[[3,[[7,[[17,[19]]]]]]]],[1,[[3,[[7,[[17,[59]]]]]]]],[1,[[3,[[7,[[17,[59]]]]]]]],[1,[[3,[15]]]],[1,[[3,[[17,[60]]]]]],[1,[[3,[[7,[[17,[16]]]]]]]],[1,[[3,[50]]]],[1,3],[[1,4],[[3,[15]]]],0,[[1,27],[[3,[23]]]],[1,[[3,[15]]]],0,0,0,0,[1],0,[1],[1],[1],[1],0,[1,4],0,[[],62],[[],62],[[],62],[[],62],[[1,63],3],[[],64],[[],64],[[1,65,63]],[[1,65,63]]],"p":[[3,"Parser"],[15,"bool"],[6,"Result"],[3,"Span"],[6,"Atom"],[15,"str"],[4,"Option"],[3,"ParserReturn"],[3,"Formatter"],[6,"Result"],[15,"u8"],[8,"Fn"],[3,"Allocator"],[3,"SourceType"],[4,"Expression"],[3,"TSTypeParameterDeclaration"],[3,"Box"],[3,"FormalParameters"],[3,"TSTypeAnnotation"],[3,"BindingPattern"],[3,"BindingIdentifier"],[3,"BlockStatement"],[4,"Statement"],[3,"Modifiers"],[3,"Class"],[4,"ClassElement"],[4,"StatementContext"],[4,"Declaration"],[3,"Decorator"],[4,"FormalParameterKind"],[3,"Function"],[3,"FunctionBody"],[3,"IdentifierName"],[3,"IdentifierReference"],[3,"ImportSpecifier"],[3,"LabelIdentifier"],[3,"BigintLiteral"],[3,"BooleanLiteral"],[3,"NullLiteral"],[3,"NumberLiteral"],[3,"RegExpLiteral"],[3,"StringLiteral"],[4,"ModuleExportName"],[3,"Property"],[3,"PrivateIdentifier"],[3,"RestElement"],[3,"SpreadElement"],[3,"SwitchCase"],[3,"TemplateElement"],[4,"TSSignature"],[3,"TSEnumMember"],[3,"TSExportAssignment"],[3,"TSNamespaceExportDeclaration"],[3,"TSModuleDeclaration"],[3,"TSClassImplements"],[3,"Vec"],[4,"TSTypeName"],[4,"TSType"],[3,"TSTypeParameterInstantiation"],[3,"TSTypeParameter"],[3,"VariableDeclaration"],[4,"Result"],[8,"FnOnce"],[3,"TypeId"],[3,"Context"]]},\
"oxc_printer":{"doc":"AST Printer with whitespace minification code adapted from …","t":"NINDDNELLLLLLLLLLLLLLLLLLLKLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Comma","Gen","None","Printer","PrinterOptions","Semicolon","Separator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","code","dedent","default","fmt","fmt","from","from","from","gen","indent","indentation","into","into","into","into_code","last_char","minify_whitespace","new","print","print_block","print_block1","print_body","print_colon","print_comma","print_ellipsis","print_equal","print_identifier","print_indent","print_list","print_newline","print_semicolon","print_sequence","print_space","print_str","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oxc_printer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Push a single character into the buffer","","","","","","","","","","","","","","","Push a string into the buffer","","","","","","","","","","",""],"i":[5,0,5,0,0,5,0,1,4,5,1,4,5,1,4,5,4,5,1,1,4,4,5,1,4,5,16,1,4,1,4,5,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,1,4,5,1,4,5,1,4,5],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[4,4],[5,5],[[]],[[]],[1,6],[1],[[],4],[[4,7],8],[[5,7],8],[[]],[[]],[[]],[1],[1],0,[[]],[[]],[[]],[1,3],[1,[[10,[9]]]],0,[[11,4],1],[[1,9]],[[1,5]],[[1,12]],[[1,13]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[1,5]],[1],[1],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15]],"p":[[3,"Printer"],[3,"Program"],[3,"String"],[3,"PrinterOptions"],[4,"Separator"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[15,"u8"],[4,"Option"],[15,"usize"],[3,"BlockStatement"],[4,"Statement"],[4,"Result"],[3,"TypeId"],[8,"Gen"]]},\
"oxc_semantic":{"doc":"","t":"SGDSSSSSSSSSSSSSSDDDDDDDDSDDDSSSSSLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLMLMLLLLLMLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["Arrow","AstNode","AstNodes","BlockScopedVariable","BlockScopedVariableExcludes","CatchVariable","Class","ClassExcludes","ClassStaticBlock","ConstVariable","Constructor","Function","FunctionScopedVariable","FunctionScopedVariableExcludes","GetAccessor","MODIFIERS","None","Reference","ResolvedReference","Scope","ScopeFlags","ScopeTree","Semantic","SemanticBuilder","SemanticNode","SetAccessor","Symbol","SymbolFlags","SymbolTable","Top","TsModuleBlock","VAR","Value","Variable","add_references","all","all","ancestors","ast_node_id","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","check_redeclaration","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","consume_errors","contains","contains","create","current_node_flags","current_node_id","declare_symbol","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","difference","difference","empty","empty","enter_node","eq","eq","extend","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get","get_resolved_reference","get_variable_symbol_id","hash","hash","id","in_class","index","index","index_mut","index_mut","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_class","is_const","is_constructor","is_empty","is_empty","is_function","is_get_accessor","is_let","is_read","is_read","is_read_write","is_read_write","is_set_accessor","is_static_block","is_top","is_ts_module","is_write","is_write","kind","kind","leave_node","module_record","name","new","new","new","new","new","new","new","node_scope","node_scope_ancestors","nodes","nodes","not","not","parent_kind","parent_kind","parent_node_id","parent_scope","parent_scope_mut","partial_cmp","partial_cmp","reference","references","remove","remove","resolve_reference","resolve_to","resolved_symbol_id","root_scope_id","scope","scope_id","scopes","set","set","source_type","source_type","span","span","span","strict_mode","strict_mode","strict_mode","sub","sub","sub_assign","sub_assign","symbols","symbols","symbols","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","trivias","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unresolved_references","variables"],"q":["oxc_semanticd":["","Indextree node containing a semantic node","Untyped AST nodes flattened into an indextree","A block-scoped variable (let or const)","Block-scoped declarations are not allowed to be re-declared","","","","","A const variable (const)","","","Variable (var) or parameter","Variables can be redeclared, but can not redeclare a …","","","","","","","","","","","Semantic node contains all the semantic information about …","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Declares a <code>Symbol</code> for the node, adds it to symbol table, …","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","","","","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Panics","","Panics","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unsolved references in this scope","Variables declared in this scope"],"i":[2,0,0,3,3,3,3,3,2,3,2,2,3,3,2,2,3,0,0,0,0,0,0,0,0,2,0,0,0,2,2,2,3,3,1,2,3,4,15,2,3,2,3,2,3,2,3,2,3,2,3,2,3,8,32,22,14,4,5,2,15,16,21,1,3,8,32,22,14,4,5,2,15,16,21,1,3,8,8,14,5,2,15,16,3,14,5,2,15,16,3,2,3,2,3,8,2,3,21,8,8,8,22,2,21,3,22,4,21,22,4,2,3,2,3,8,2,3,2,3,1,5,22,14,4,5,2,2,2,2,2,15,16,21,1,3,3,3,3,3,8,32,22,14,4,5,2,15,16,21,1,3,2,3,2,3,2,3,2,3,21,21,5,2,3,1,14,22,4,22,4,2,3,2,3,2,3,8,32,22,14,4,5,2,15,16,21,1,3,2,3,1,1,5,2,3,5,5,1,15,16,15,16,5,5,5,5,15,16,22,14,8,32,1,8,14,4,5,15,16,1,4,4,32,8,2,3,8,22,4,4,4,2,3,16,1,2,3,21,15,16,4,8,14,32,2,3,32,8,16,1,15,14,4,5,2,3,2,3,32,21,8,2,3,14,5,2,15,16,3,2,3,32,8,32,22,14,4,5,2,15,16,21,1,3,8,32,22,14,4,5,2,15,16,21,1,3,8,32,22,14,4,5,2,15,16,21,1,3,2,3,5,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],3],0,0,[[2,2],2],[[3,3],3],[[2,2]],[[3,3]],[[2,2],2],[[3,3],3],[[2,2]],[[3,3]],[2,7],[3,7],[[2,2],2],[[3,3],3],[[2,2]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[14,14],[5,5],[2,2],[15,15],[16,16],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],17],[[3,3],17],[2,2],[3,3],[8,[[19,[18]]]],[[2,2],20],[[3,3],20],0,0,0,0,[[],22],[[],2],[[],21],[[],3],[22],[4],[21],[22,23],[4,23],[[2,2],2],[[3,3],3],[[],2],[[],3],[[8,24]],[[2,2],20],[[3,3],20],[[2,25]],[[3,25]],[1,3],0,[[22,26],27],[[14,26],27],[[4,26],27],[[5,26],27],[[2,26],27],[[2,26],27],[[2,26],27],[[2,26],27],[[2,26],27],[[15,26],27],[[16,26],27],[[21,26],27],[[1,26],27],[[3,26],27],[[3,26],27],[[3,26],27],[[3,26],27],[[3,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[13,[2]]]],[7,[[13,[3]]]],[7,2],[7,3],[7,2],[7,3],[25,2],[25,3],0,0,[[5,11],[[13,[0]]]],[2],[3],0,[14,20],[[22,28]],[[4,28]],[[22,28],29],[[4,28],30],[[2,2]],[[3,3]],[[2,2],2],[[3,3],3],[[2,2],20],[[3,3],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,20],[3,20],[1,20],[1,20],[5,20],[2,20],[3,20],[5,20],[5,20],[1,20],[15,20],[16,20],[15,20],[16,20],[5,20],[5,20],[5,20],[5,20],[15,20],[16,20],[[22,[31,[28]]],24],[14,24],[[8,24]],[32,33],[1,11],[34,8],0,[20,4],[[2,20],5],0,0,0,[[4,29],5],[[4,29],[[6,[5]]]],[32,22],0,[2,2],[3,3],[8,24],[[22,29],24],0,0,0,[[2,2],[[13,[17]]]],[[3,3],[[13,[17]]]],0,[1],[[2,2]],[[3,3]],0,0,0,0,0,0,[32,4],[[2,2,20]],[[3,3,20]],[32,34],0,[16,12],[1,12],0,[[14,5],20],[[4,29],20],[5,20],[[2,2],2],[[3,3],3],[[2,2]],[[3,3]],[32,21],[21,19],0,[[2,2],2],[[3,3],3],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2]],[[3,3]],[32,35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[2,2],2],[[3,3],3],0,0],"p":[[3,"Symbol"],[3,"ScopeFlags"],[3,"SymbolFlags"],[3,"ScopeTree"],[3,"Scope"],[3,"Ancestors"],[15,"u16"],[3,"SemanticBuilder"],[3,"Program"],[3,"Rc"],[6,"Atom"],[3,"Span"],[4,"Option"],[3,"SemanticNode"],[3,"Reference"],[3,"ResolvedReference"],[4,"Ordering"],[6,"Error"],[3,"Vec"],[15,"bool"],[3,"SymbolTable"],[3,"AstNodes"],[3,"Arena"],[4,"AstKind"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"NodeId"],[6,"AstNode"],[3,"Node"],[8,"Into"],[3,"Semantic"],[3,"ModuleRecord"],[3,"SourceType"],[3,"Trivias"],[4,"Result"],[3,"TypeId"]]},\
"oxc_wasm":{"doc":"","t":"NEDNLLLLLLLLLMLLLLMMFLLLLLLLL","n":["JavaScript","Language","Options","TypeScript","borrow","borrow","borrow_mut","borrow_mut","default","default","deserialize","deserialize","eq","eslintrc","from","from","into","into","jsx","language","main","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oxc_wasm","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,0,0,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,0,1,2,1,2,1,2,1,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],2],[3,[[4,[1]]]],[3,[[4,[2]]]],[[1,1],5],0,[[]],[[]],[[]],[[]],0,0,[[6,7],7],[[1,8],4],[[2,8],4],[[],4],[[],4],[[],4],[[],4],[[],9],[[],9]],"p":[[4,"Language"],[3,"Options"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[15,"str"],[3,"JsValue"],[8,"Serializer"],[3,"TypeId"]]},\
"rulegen":{"doc":"","t":"DRDDLLLLLLLMLMLLLLLLMAFLLLLMMMLMMAMLLLLLLLLLLMLLLLLLLLLLLDDHHMMFFFFLLLLLLLLLLLLLLLLFRDLLMFLLMLLLLL","n":["Context","ESLINT_TEST_PATH","State","TestCase","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","code","code","fail_cases","fail_cases","from","from","from","into","into","into","invalid_tests","json","main","new","new","new","pass_cases","pass_cases","rule","rule_name","serialize","source_text","source_text","template","test_code","to_code","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","valid_tests","visit_argument","visit_call_expression","visit_expression","visit_expression","visit_expression_statement","visit_object_expression","visit_program","visit_property","visit_statement","visit_string_literal","visit_template_literal","DUP_QUOTE_MATCHER","IDENT_MATCHER","LAZY","LAZY","__private_field","__private_field","__stability","__stability","__static_ref_initialize","__static_ref_initialize","borrow","borrow","borrow_mut","borrow_mut","deref","deref","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","wrap_property_in_quotes","RULE_TEMPLATE","Template","borrow","borrow_mut","context","format_rule_output","from","into","registry","render","try_from","try_into","type_id","with_context"],"q":["rulegen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rulegen::json","","","","","","","","","","","","","","","","","","","","","","","","","","","rulegen::template","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Convert a javascript object literal to JSON by wrapping …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,5,8,1,5,8,1,1,5,8,1,5,8,1,5,8,5,0,0,1,5,8,5,8,8,8,8,1,5,0,1,1,1,5,8,1,5,8,1,5,8,5,5,1,1,5,5,1,5,5,5,1,1,0,0,0,0,23,24,0,0,0,0,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,0,0,0,28,28,28,0,28,28,28,28,28,28,28,28],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[4,[[3,[2]]]]]],0,[5,[[6,[1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[2,7],[[4,[1]]]],[2,5],[[2,2,2,2],8],[5,[[6,[1]]]],0,0,0,[[8,9],10],0,0,0,0,[1,11],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],0,[[5,7]],[[1,13]],[[1,14]],[[5,14]],[[5,15]],[[1,16]],[[5,17]],[[5,18]],[[5,19]],[[1,20]],[[1,21]],0,0,0,0,0,0,[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[23,22],[24,22],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[2,11],0,0,[[]],[[]],0,[25,[[10,[26,27]]]],[[]],[[]],0,[28,[[10,[27]]]],[[],10],[[],10],[[],12],[8,28]],"p":[[3,"TestCase"],[15,"str"],[4,"Cow"],[4,"Option"],[3,"State"],[3,"Vec"],[4,"Argument"],[3,"Context"],[8,"Serializer"],[4,"Result"],[3,"String"],[3,"TypeId"],[3,"CallExpression"],[4,"Expression"],[3,"ExpressionStatement"],[3,"ObjectExpression"],[3,"Program"],[3,"Property"],[4,"Statement"],[3,"StringLiteral"],[3,"TemplateLiteral"],[3,"Regex"],[3,"IDENT_MATCHER"],[3,"DUP_QUOTE_MATCHER"],[3,"PathBuf"],[3,"Child"],[3,"Error"],[3,"Template"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
